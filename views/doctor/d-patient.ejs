<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Doctor - Patient Consultations</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- jQuery UI CSS for datepicker -->
  <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <!-- SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <!-- Optional: FontAwesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    /* Global Styles */
    html, body {
      height: 100%;
      margin: 0;
      background-color: #f7f7f7;
      font-family: Arial, sans-serif;
    }
    .reservation-container {
      padding: 2rem;
    }
    .content-header h3 {
      font-size: 24px;
      color: #0047AB;
      font-weight: bold;
    }
    .search-box {
      width: 300px;
      height: 38px;
    }
    /* Table styles */
    .custom-table {
      table-layout: fixed;
      width: 100%;
      background-color: #ffffff;
      border-collapse: separate;
      border-spacing: 0;
    }
    .custom-table thead tr {
      background-color: #0047AB;
      color: #ffffff;
    }
    .custom-table thead th {
      text-align: center;
      padding: 12px;
      font-weight: 600;
      border: none;
    }
    .custom-table tbody tr {
      border-bottom: 1px solid #dee2e6;
    }
    .custom-table tbody td {
      text-align: center;
      padding: 12px;
    }
    .custom-table tbody tr:hover {
      background-color: #f1f1f1;
    }
    .badge-done {
      background-color: #28a745;
      color: #fff;
      font-size: 0.9em;
      padding: 0.5em;
    }
    .fixed-width {
      min-width: 120px;
    }
    /* Minimalist Modal Styles */
    .modal-content {
      border: none;
      border-radius: 8px;
      overflow: hidden;
    }
    .modal-header {
      background-color: #0047AB;
      color: #ffffff;
      border-bottom: none;
      padding: 1rem 1.5rem;
    }
    .modal-header .close {
      color: #ffffff;
      opacity: 1;
    }
    .modal-body {
      background-color: #ffffff;
      padding: 1.5rem;
    }
    .modal-footer {
      background-color: #ffffff;
      border-top: none;
      padding: 1rem 1.5rem;
    }
    .modal-title {
      font-size: 20px;
      font-weight: bold;
    }
    .form-control {
      border-radius: 4px;
      border: 1px solid #ced4da;
    }
    .btn-primary {
      background-color: #0047AB;
      border: none;
    }
    .btn-primary:hover {
      background-color: #003b95;
    }
    .btn-secondary {
      background-color: #6c757d;
      border: none;
    }
    .btn-secondary:hover {
      background-color: #5a6268;
    }
    /* Card styles for sections */
    .card {
      border: 1px solid #e9ecef;
      border-radius: 4px;
      margin-bottom: 1.5rem;
    }
    .card-header {
      background-color: #f1f1f1;
      padding: 0.75rem 1rem;
      border-bottom: 1px solid #e9ecef;
    }
    .card-body {
      padding: 1rem;
    }
    .service-category-block {
      border: 1px solid #ddd;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 4px;
    }
    .error-input {
      border: 1px solid red !important;
    }
    /* Overview Section */
    #overviewCard {
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-top: 1.5rem;
    }
    #overviewCard .card-header {
      background-color: #f1f1f1;
      padding: 0.75rem 1rem;
      border-bottom: 1px solid #ddd;
    }
    #overviewCard .card-body {
      padding: 1rem;
    }
    /* Custom styling for the remove file "x" button */
    .remove-file-btn {
      display: none;
      border: none;
      background: transparent;
      font-size: 16px;
      line-height: 1;
      margin-left: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <!-- Expose serviceCategories as a client-side variable -->
  <script>
    var serviceCategoriesClient = <%- JSON.stringify(serviceCategories) %>;
    console.log("serviceCategoriesClient:", serviceCategoriesClient);
  </script>
  
  <div class="container-fluid reservation-container">
    <div class="content-header">
      <h3>Patient Consultations</h3>
    </div>
    <div class="row header-row">
      <div class="col-md-12 d-flex justify-content-end align-items-center">
        <input type="text" class="form-control form-control-sm search-box" id="searchInput" placeholder="Search by Owner Name">
      </div>
    </div>
    <!-- Patients Table -->
    <table class="table custom-table mt-3" id="patientsTable">
      <thead>
        <tr>
          <th>Owner Name</th>
          <th>Service</th>
          <th>Consultation View Details</th>
          <th>Consultation</th>
          <th>Schedule</th>
          <th>Mark as Done</th>
        </tr>
      </thead>
      <tbody>
        <% if (patients.length === 0) { %>
          <tr>
            <td colspan="6" class="text-center">You don't have consultation today</td>
          </tr>
        <% } else { %>
          <% patients.forEach(function(patient) { %>
            <tr 
              id="reservation-<%= patient._id %>"
              data-schedule="<%= (patient.schedule && patient.schedule.scheduleDate) ? new Date(patient.schedule.scheduleDate).toISOString().slice(0,10) : '' %>"
            >
              <td class="ownerName"><%= patient.ownerName %></td>
              <td><%= patient.service %></td>
              <td>
                <button class="btn btn-info btn-sm" onclick="viewConsultation('<%= patient._id %>')">View Details</button>
              </td>
              <td>
                <button class="btn btn-primary btn-sm fixed-width" onclick="addConsultation('<%= patient._id %>')">Add</button>
              </td>
              <td>
                <% if (patient.schedule && patient.schedule.scheduleDate) { %>
                  <div>
                    <strong><%= new Date(patient.schedule.scheduleDate).toISOString().slice(0,10) %></strong><br>
                    <small><%= patient.schedule.scheduleDetails %></small>
                  </div>
                <% } else { %>
                  <button class="btn btn-secondary btn-sm fixed-width" onclick="openScheduleModal('<%= patient._id %>')">Add</button>
                <% } %>
              </td>
              <td>
                <% if (patient.status === 'Done') { %>
                  <span class="badge badge-done">Done</span>
                <% } else { %>
                  <button class="btn btn-secondary btn-sm" onclick="markAsDone('<%= patient._id %>')">Mark as Done</button>
                <% } %>
              </td>
            </tr>
          <% }); %>
        <% } %>
      </tbody>
    </table>
    <!-- Pagination container -->
    <div id="patientsPagination"></div>
    
    <!-- New Consultation Modal -->
    <div class="modal fade" id="consultationModal" tabindex="-1" role="dialog" aria-labelledby="consultationModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <form id="consultationForm" enctype="multipart/form-data">
            <div class="modal-header">
              <h5 class="modal-title" id="consultationModalLabel">Add Consultation Details</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <!-- Physical Examination Section -->
              <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center" data-toggle="collapse" data-target="#physicalExamCollapse" aria-expanded="false" style="cursor: pointer;">
                  <h6 class="mb-0">Physical Examination</h6>
                  <button type="button" class="close" aria-label="Close" onclick="event.stopPropagation(); $('#physicalExamCollapse').collapse('hide');">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div id="physicalExamCollapse" class="collapse">
                  <div class="card-body">
                    <div class="form-group">
                      <label for="examWeight">Weight</label>
                      <input type="text" class="form-control" id="examWeight" name="examWeight" placeholder="Enter weight">
                    </div>
                    <div class="form-group">
                      <label for="examTemperature">Temperature</label>
                      <input type="text" class="form-control" id="examTemperature" name="examTemperature" placeholder="Enter temperature">
                    </div>
                    <div class="form-group">
                      <label for="examOthers">Other Observations</label>
                      <textarea class="form-control" id="examOthers" name="examOthers" rows="2" placeholder="Additional details"></textarea>
                    </div>
                  </div>
                </div>
              </div>
              <!-- Services Section -->
              <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                  <h6 class="mb-0">Services</h6>
                  <button type="button" class="btn btn-sm btn-outline-primary" id="btnAddServiceCategory">Add Category</button>
                </div>
                <div class="card-body">
                  <div id="serviceCategoriesContainer">
                    <!-- Dynamic service category blocks will be appended here -->
                  </div>
                </div>
              </div>
              <!-- Diagnosis Section -->
              <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center" data-toggle="collapse" data-target="#diagnosisCollapse" aria-expanded="false" style="cursor: pointer;">
                  <h6 class="mb-0">Diagnosis</h6>
                  <button type="button" class="close" aria-label="Close" onclick="closeDiagnosis(event);">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div id="diagnosisCollapse" class="collapse">
                  <div class="card-body">
                    <textarea class="form-control" id="diagnosis" name="diagnosis" rows="3" placeholder="Enter diagnosis"></textarea>
                  </div>
                </div>
              </div>
              <!-- Medication Section -->
              <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center" data-toggle="collapse" data-target="#medicationCollapse" aria-expanded="false" style="cursor: pointer;">
                  <h6 class="mb-0">Medication</h6>
                  <button type="button" class="close" aria-label="Close" onclick="closeMedication(event);">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div id="medicationCollapse" class="collapse">
                  <div class="card-body">
                    <table class="table table-bordered" id="medicationTable">
                      <thead>
                        <tr>
                          <th>Medication</th>
                          <th>Dosage</th>
                          <th>Remarks</th>
                          <th>Quantity</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        <!-- Medication rows dynamically added -->
                      </tbody>
                    </table>
                    <button type="button" class="btn btn-secondary mb-2" id="btnAddMedicationRow">Add Medication Row</button>
                    <button type="button" class="btn btn-info mb-2" id="btnSelectMedication">Select Medication</button>
                    <div id="medicationSelectorArea" class="mt-2" style="display:none;">
                      <div class="form-group">
                        <label for="medicationCategorySelect">Select Category:</label>
                        <select id="medicationCategorySelect" class="form-control">
                          <option value="">-- Choose a category --</option>
                        </select>
                      </div>
                      <div class="form-group">
                        <label for="medicationProductSelect">Select Product:</label>
                        <select id="medicationProductSelect" class="form-control">
                          <option value="">-- Choose a product --</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <!-- Notes Section -->
              <div class="card mt-3">
                <div class="card-header d-flex justify-content-between align-items-center" data-toggle="collapse" data-target="#notesCollapse" aria-expanded="false" style="cursor: pointer;">
                  <h6 class="mb-0">Notes</h6>
                  <button type="button" class="close" aria-label="Close" onclick="event.stopPropagation(); $('#notesCollapse').collapse('hide');">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div id="notesCollapse" class="collapse">
                  <div class="card-body">
                    <textarea class="form-control" id="notes" name="notes" rows="3" placeholder="Enter any additional notes"></textarea>
                  </div>
                </div>
              </div>
              <!-- Confinement Status Section -->
              <div class="card mt-3">
                <div class="card-header">
                  <h6 class="mb-0">Confinement Status</h6>
                </div>
                <div class="card-body">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="confinementStatus[]" value="inpatient" id="statusInpatient">
                    <label class="form-check-label" for="statusInpatient">Inpatient</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="confinementStatus[]" value="outpatient" id="statusOutpatient">
                    <label class="form-check-label" for="statusOutpatient">Outpatient</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="confinementStatus[]" value="for release" id="statusForRelease">
                    <label class="form-check-label" for="statusForRelease">For Release</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="confinementStatus[]" value="surgical" id="statusSurgical">
                    <label class="form-check-label" for="statusSurgical">Surgical</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="confinementStatus[]" value="refuse confinement" id="statusRefuseConfinement">
                    <label class="form-check-label" for="statusRefuseConfinement">Refuse Confinement</label>
                  </div>
                </div>
              </div>
              <!-- Overview Section -->
              <button type="button" id="btnPreviewOverview" class="btn btn-info mb-3">Preview Overview</button>
              <div class="card" id="overviewCard">
                <div class="card-header">
                  <h6 class="mb-0">Overview</h6>
                </div>
                <div class="card-body" id="overviewContent">
                  <!-- Overview content will be populated here -->
                </div>
              </div>
              <!-- Hidden input for reservation ID (Required by the server) -->
              <input type="hidden" id="reservationId" name="reservationId">
            </div>
            <div class="modal-footer">
              <button type="submit" class="btn btn-primary">Save Consultation</button>
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <!-- Modal for Adding Schedule -->
    <div class="modal fade" id="scheduleModal" tabindex="-1" role="dialog" aria-labelledby="scheduleModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <form id="scheduleForm">
            <div class="modal-header">
              <h5 class="modal-title" id="scheduleModalLabel">Schedule Follow-Up</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div id="scheduleDatePicker"></div>
              <input type="hidden" id="scheduleDate" name="scheduleDate" required>
              <div class="form-group mt-3">
                <label for="scheduleDetails">Service Details</label>
                <input type="text" class="form-control" id="scheduleDetails" name="scheduleDetails" placeholder="e.g., Checkup, Vaccination" required>
              </div>
              <input type="hidden" id="scheduleReservationId" name="reservationId">
            </div>
            <div class="modal-footer">
              <button type="submit" class="btn btn-primary">Save Schedule</button>
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <!-- Global Calendar Modal -->
    <div class="modal fade" id="globalCalendarModal" tabindex="-1" role="dialog" aria-labelledby="globalCalendarModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="globalCalendarModalLabel">Follow-Up Calendar</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div id="globalCalendarPicker"></div>
            <div id="followUpList" class="mt-3"></div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
    <!-- Modal for Viewing Consultation Details -->
    <div class="modal fade" id="viewConsultationModal" tabindex="-1" role="dialog" aria-labelledby="viewConsultationModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="viewConsultationModalLabel">Consultation Details</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body" id="consultationDetails">
            <!-- Consultation details and history will load here -->
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- jQuery, jQuery UI, Bootstrap JS -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <!-- SweetAlert2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- FontAwesome (optional) -->
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  <script>
    
    // --- Close sections via their "x" buttons ---
    function closeMedication(e) {
      e.stopPropagation();
      $("#medicationCollapse").collapse("hide");
    }
    function closeDiagnosis(e) {
      e.stopPropagation();
      $("#diagnosisCollapse").collapse("hide");
    }
    
    // ----------------- Dynamic Services Section -----------------
    function addServiceCategoryBlock() {
      console.log("addServiceCategoryBlock called");
      if (typeof serviceCategoriesClient === "undefined") {
        console.error("serviceCategoriesClient is not defined!");
        return;
      }
      var optionsHtml = '<option value="">Select Category</option>';
      serviceCategoriesClient.forEach(function(cat) {
        optionsHtml += '<option value="' + cat._id + '">' + cat.name + '</option>';
      });
      var block = $(`
        <div class="service-category-block">
          <div class="d-flex justify-content-between align-items-center">
            <select class="form-control service-category-select" style="width:80%;">
              ${optionsHtml}
            </select>
            <button type="button" class="close remove-service-category-block" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="services-list mt-2">
            <!-- Services for the selected category will load here -->
          </div>
        </div>
      `);
      $("#serviceCategoriesContainer").append(block);
    }
    
    // Attach click event to Add Category button
    $(document).ready(function(){
      $("#btnAddServiceCategory").click(function(){
        addServiceCategoryBlock();
      });
    });
    
    // Load services for the chosen category
    $(document).on('change', '.service-category-select', function(){
      var categoryId = $(this).val();
      var container = $(this).closest('.service-category-block').find('.services-list');
      container.empty();
      if(categoryId) {
        $.ajax({
          url: '/doctor/services/listByCategory',
          method: 'GET',
          data: { categoryId: categoryId },
          success: function(response) {
            if(response.success && response.services && response.services.length > 0) {
              response.services.forEach(function(service) {
                var serviceHtml = `
                  <div class="form-group service-item">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="service_${service._id}" name="services[]" value="${service._id}">
                      <label class="form-check-label" for="service_${service._id}" data-service-id="${service._id}">${service.serviceName}</label>
                    </div>
                    <div class="service-extra-fields" style="display:none; margin-left:20px;">
                      <input type="text" class="form-control mb-2" name="serviceText_${service._id}" placeholder="Enter details for ${service.serviceName}">
                      <div class="d-flex align-items-center">
                        <input type="file" class="form-control-file" name="serviceFile_${service._id}" data-service-id="${service._id}" style="flex:1;">
                        <button type="button" class="remove-file-btn" style="display:none;">&times;</button>
                      </div>
                    </div>
                  </div>
                `;
                container.append(serviceHtml);
              });
            } else {
              container.html("<p>No services available for this category.</p>");
            }
          },
          error: function() {
            container.html("<p>Error loading services.</p>");
          }
        });
      }
    });
    
    // Toggle service extra fields
    $(document).on('change', '.service-item .form-check-input', function(){
      var extra = $(this).closest('.service-item').find('.service-extra-fields');
      if($(this).is(':checked')){
        extra.show();
      } else {
        extra.hide();
      }
    });
    
    // Remove a service-category block with SweetAlert2 confirmation
    $(document).on('click', '.remove-service-category-block', function(){
      var $this = $(this);
      Swal.fire({
        icon: 'warning',
        title: 'Remove Category',
        text: 'Are you sure you want to remove this category?',
        showCancelButton: true,
        confirmButtonText: 'Yes, remove it',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if(result.isConfirmed) {
          $this.closest('.service-category-block').remove();
          Swal.fire({
            icon: 'success',
            title: 'Removed',
            text: 'Category removed successfully.'
          });
        }
      });
    });
    
    // Show/hide the remove file "x" button based on file input selection
    $(document).on('change', 'input[type="file"]', function(){
      if(this.files && this.files.length > 0) {
        $(this).siblings('.remove-file-btn').show();
      } else {
        $(this).siblings('.remove-file-btn').hide();
      }
    });
    
    // Remove the selected file when the "x" button is clicked
    $(document).on('click', '.remove-file-btn', function(){
      $(this).siblings('input[type="file"]').val('');
      $(this).hide();
    });
    
    // ----------------- Consultation Form Submission -----------------
    $("#consultationForm").submit(function(e) {
      e.preventDefault();
      console.log("Hidden reservationId value:", $("#reservationId").val());
      
      let formData = new FormData(this);
      
      // Gather medications data from the medication table.
      let medications = [];
      $("#medicationTable tbody tr").each(function() {
        let medName = $(this).find(".medication-name").val();
        let dosage = $(this).find("input[name='medications[][dosage]']").val();
        let remarks = $(this).find("input[name='medications[][remarks]']").val();
        let quantity = $(this).find("input[name='medications[][quantity]']").val();
        if(medName || dosage || remarks || quantity) {
          medications.push({ name: medName, dosage, remarks, quantity });
        }
      });
      formData.append("medicationsData", JSON.stringify(medications));
      
      // Gather services data from the service category blocks.
      let services = [];
      $("#serviceCategoriesContainer .service-category-block").each(function() {
        let category = $(this).find("select.service-category-select option:selected").text();
        $(this).find(".service-item").each(function() {
          if($(this).find("input[type='checkbox']").is(":checked")){
            let serviceId = $(this).find("label").data("service-id");
            let serviceName = $(this).find("label").text();
            let details = $(this).find("input[type='text']").val();
            services.push({ serviceId, serviceName, details });
          }
        });
      });
      formData.append("servicesData", JSON.stringify(services));
      
      console.log("FormData reservationId:", formData.get('reservationId'));
      
      $.ajax({
        url: '/doctor/add-consultation',
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
          if(response.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Consultation details saved.'
            }).then(() => {
              $("#consultationModal").modal("hide");
              $("#consultationForm")[0].reset();
              $("#medicationTable tbody").empty();
            });
          } else {
            Swal.fire('Error', response.message || 'Error saving consultation details.', 'error');
          }
        },
        error: function() {
          Swal.fire('Error', 'Server error while saving consultation details.', 'error');
        }
      });
    });
    
    // ----------------- Table Pagination -----------------
    var rowsPerPage = 10;
    var rows = $("#patientsTable tbody tr");
    if (rows.length > rowsPerPage) {
      var rowsCount = rows.length;
      var pageCount = Math.ceil(rowsCount / rowsPerPage);
      var pagination = $('<nav aria-label="Page navigation"><ul class="pagination justify-content-center"></ul></nav>');
      for (var i = 0; i < pageCount; i++) {
        $('<li class="page-item"><a class="page-link" href="#">' + (i + 1) + '</a></li>')
          .appendTo(pagination.find("ul"));
      }
      $("#patientsPagination").html(pagination);
      rows.hide();
      rows.slice(0, rowsPerPage).show();
      $(".pagination li.page-item").on("click", function(e) {
        e.preventDefault();
        var index = $(this).index();
        var start = index * rowsPerPage;
        var end = start + rowsPerPage;
        rows.hide();
        rows.slice(start, end).show();
        $(".pagination li.page-item").removeClass("active");
        $(this).addClass("active");
      });
      $(".pagination li.page-item:first-child").addClass("active");
    }
    
    // ----------------- Search Functionality -----------------
    $("#searchInput").on("keyup", function () {
      var searchValue = $(this).val().toLowerCase();
      $("#patientsTable tbody tr").filter(function () {
        $(this).toggle($(this).find('.ownerName').text().toLowerCase().indexOf(searchValue) > -1);
      });
    });
    
    // ----------------- Medication Table: Add & Remove Rows -----------------
    $("#btnAddMedicationRow").click(function(){
      var newRow = `
        <tr>
          <td><input type="text" name="medications[][name]" class="form-control medication-name" placeholder="Medication"></td>
          <td><input type="text" name="medications[][dosage]" class="form-control" placeholder="Dosage"></td>
          <td><input type="text" name="medications[][remarks]" class="form-control" placeholder="Remarks"></td>
          <td><input type="number" name="medications[][quantity]" class="form-control" placeholder="Quantity" min="0"></td>
          <td><button type="button" class="btn btn-danger btn-sm removeMedicationRow">Remove</button></td>
        </tr>
      `;
      $("#medicationTable tbody").append(newRow);
    });
    
    // Remove medication row with SweetAlert2 confirmation
    $("#medicationTable").on("click", ".removeMedicationRow", function(){
      var $row = $(this).closest("tr");
      Swal.fire({
        icon: 'warning',
        title: 'Remove Medication',
        text: 'Are you sure you want to remove this medication row?',
        showCancelButton: true,
        confirmButtonText: 'Yes, remove it',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if(result.isConfirmed) {
          $row.remove();
          Swal.fire({
            icon: 'success',
            title: 'Removed',
            text: 'Medication row removed successfully.'
          });
        }
      });
    });
    
    // ----------------- Select Medication Logic -----------------
    $("#btnSelectMedication").click(function() {
      $("#medicationSelectorArea").toggle();
      $("#medicationCategorySelect").html('<option value="">-- Choose a category --</option>');
      $("#medicationProductSelect").html('<option value="">-- Choose a product --</option>');
      $.ajax({
        url: '/doctor/inventory/categories',
        method: 'GET',
        success: function(response) {
          if(response.success && response.categories && response.categories.length > 0) {
            response.categories.forEach(function(cat){
              $("#medicationCategorySelect").append(`<option value="${cat}">${cat}</option>`);
            });
          } else {
            console.warn('No categories found.');
          }
        },
        error: function() {
          console.error('Error loading categories.');
        }
      });
    });
    
    $("#medicationCategorySelect").change(function() {
      var catVal = $(this).val();
      $("#medicationProductSelect").html('<option value="">-- Choose a product --</option>');
      if(catVal) {
        $.ajax({
          url: '/doctor/inventory/listByCategory',
          method: 'GET',
          data: { category: catVal },
          success: function(response) {
            if(response.success && response.products && response.products.length > 0) {
              response.products.forEach(function(prod){
                $("#medicationProductSelect").append(`<option value="${prod.name}">${prod.name}</option>`);
              });
            } else {
              console.warn('No products found for this category.');
            }
          },
          error: function() {
            console.error('Error loading products.');
          }
        });
      }
    });
    
    $("#medicationProductSelect").change(function() {
      var productName = $(this).val();
      if(productName) {
        var $lastMedRow = $("#medicationTable tbody tr").last();
        $lastMedRow.find(".medication-name").val(productName);
      }
    });
    
    // ----------------- Check Inventory Quantity on Quantity Input Change -----------------
    $("#medicationTable").on("input", "input[name='medications[][quantity]']", function(){
      var $quantityInput = $(this);
      var enteredQty = parseInt($quantityInput.val(), 10);
      var productName = $quantityInput.closest("tr").find(".medication-name").val();
      if(productName && !isNaN(enteredQty)) {
        $.ajax({
          url: '/doctor/inventory/checkQuantity',
          method: 'GET',
          data: { product: productName },
          success: function(response) {
            if(response.success) {
              var availableQty = response.availableQty;
              if(enteredQty > availableQty) {
                Swal.fire({
                  icon: 'error',
                  title: 'Insufficient Stock',
                  text: 'The entered quantity (' + enteredQty + ') exceeds available inventory (' + availableQty + ').',
                  showCancelButton: true,
                  confirmButtonText: 'Set to ' + availableQty,
                  cancelButtonText: 'Cancel'
                }).then((result) => {
                  if(result.isConfirmed) {
                    $quantityInput.val(availableQty);
                    $quantityInput.removeClass("error-input");
                  } else {
                    $quantityInput.addClass("error-input");
                  }
                });
              } else {
                $quantityInput.removeClass("error-input");
              }
            } else {
              console.error('Failed to retrieve available quantity.');
            }
          },
          error: function() {
            console.error('Error checking inventory quantity.');
          }
        });
      } else {
        $quantityInput.removeClass("error-input");
      }
    });
    
    // ----------------- Append Unit on Physical Examination Fields -----------------
    $("#examWeight").on('blur', function(){
      var value = $(this).val().trim();
      if(value && !value.toLowerCase().endsWith("kg")) {
        $(this).val(value + " kg");
      }
    });
    
    $("#examTemperature").on('blur', function(){
      var value = $(this).val().trim();
      if(value && !value.toLowerCase().endsWith("°c")) {
        $(this).val(value + " °C");
      }
    });
    
    // ----------------- Preview Overview Button -----------------
    $("#btnPreviewOverview").click(function() {
      let examWeight = $("#examWeight").val();
      let examTemperature = $("#examTemperature").val();
      let examOthers = $("#examOthers").val();
      let diagnosis = $("#diagnosis").val();
      let notes = $("#notes").val();
      
      // Gather confinement status checkboxes:
      let confinementStatus = [];
      $("input[name='confinementStatus[]']:checked").each(function(){
        confinementStatus.push($(this).val());
      });
      
      let medications = [];
      $("#medicationTable tbody tr").each(function() {
        let medName = $(this).find(".medication-name").val();
        let dosage = $(this).find("input[name='medications[][dosage]']").val();
        let remarks = $(this).find("input[name='medications[][remarks]']").val();
        let quantity = $(this).find("input[name='medications[][quantity]']").val();
        if(medName || dosage || remarks || quantity) {
          medications.push({ name: medName, dosage, remarks, quantity });
        }
      });
      
      let servicesOverview = [];
      $("#serviceCategoriesContainer .service-category-block").each(function() {
        let category = $(this).find("select.service-category-select option:selected").text();
        let selectedServices = [];
        $(this).find(".service-item").each(function() {
          if($(this).find("input[type='checkbox']").is(":checked")){
            let serviceId = $(this).find("label").data("service-id");
            let serviceName = $(this).find("label").text();
            let details = $(this).find("input[type='text']").val();
            selectedServices.push({ serviceId, serviceName, details });
          }
        });
        servicesOverview.push({ category, selectedServices });
      });
      
      let overviewHtml = `<h6>Physical Examination</h6>
        <p><strong>Weight:</strong> ${examWeight || 'N/A'}</p>
        <p><strong>Temperature:</strong> ${examTemperature || 'N/A'}</p>
        <p><strong>Other Observations:</strong> ${examOthers || 'N/A'}</p>
        <hr>
        <h6>Services</h6>`;
      servicesOverview.forEach(function(block) {
        overviewHtml += `<p><strong>Category:</strong> ${block.category}</p>`;
        if(block.selectedServices.length > 0) {
          overviewHtml += `<ul>`;
          block.selectedServices.forEach(function(srv) {
            overviewHtml += `<li>${srv.serviceName}${srv.details ? ' - ' + srv.details : ''}</li>`;
          });
          overviewHtml += `</ul>`;
        } else {
          overviewHtml += `<p>N/A</p>`;
        }
      });
      overviewHtml += `<hr>
        <h6>Diagnosis</h6>
        <p>${diagnosis || 'N/A'}</p>
        <hr>
        <h6>Medications</h6>`;
      if(medications.length > 0) {
        overviewHtml += `<table class="table table-sm">
          <thead>
            <tr>
              <th>Medication</th>
              <th>Dosage</th>
              <th>Remarks</th>
              <th>Quantity</th>
            </tr>
          </thead>
          <tbody>`;
        medications.forEach(function(med) {
          overviewHtml += `<tr>
            <td>${med.name || 'N/A'}</td>
            <td>${med.dosage || 'N/A'}</td>
            <td>${med.remarks || 'N/A'}</td>
            <td>${med.quantity || 'N/A'}</td>
          </tr>`;
        });
        overviewHtml += `</tbody></table>`;
      } else {
        overviewHtml += `<p>N/A</p>`;
      }
      overviewHtml += `<hr>
        <h6>Notes</h6>
        <p>${notes || 'N/A'}</p>
        <hr>
        <h6>Confinement Status</h6>
        <p>${confinementStatus.length > 0 ? confinementStatus.join(", ") : "N/A"}</p>`;
      
      $("#overviewContent").html(overviewHtml);
    });
    
    // ----------------- View Consultation -----------------
    function viewConsultation(reservationId) {
      $.ajax({
        url: '/doctor/get-consultation',
        method: 'GET',
        data: { reservationId: reservationId },
        success: function(response) {
          if(response.success) {
            let detailsHtml = '';
            if(response.reservation.pets && response.reservation.pets.length > 0) {
              let petObj = response.reservation.pets[0].petId || response.reservation.pets[0];
              detailsHtml += '<p><strong>Pet Name:</strong> ' + petObj.petName + '</p>';
              detailsHtml += '<p><strong>Birthday:</strong> ' + (petObj.birthday ? new Date(petObj.birthday).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }) : 'N/A') + '</p>';
            }
            if(response.reservation.concerns) {
              detailsHtml += '<p><strong>Customer Concerns:</strong> ' + response.reservation.concerns + '</p>';
            }
            if(response.reservation.pets && response.reservation.pets.length > 0) {
              let petObj = response.reservation.pets[0].petId || response.reservation.pets[0];
              $.ajax({
                url: '/hr/get-pet-history',
                method: 'GET',
                data: { 
                  petId: petObj._id,
                  petName: petObj.petName, 
                  ownerId: response.reservation.owner
                },
                success: function(historyResponse) {
                  if(historyResponse.success && historyResponse.history.length > 0) {
                    detailsHtml += '<hr><p><strong>Consultation History:</strong></p>';
                    detailsHtml += '<div id="historyAccordion">';
                    historyResponse.history.forEach(function(record, index) {
                      const dateField = record.updatedAt || record.createdAt;
                      const date = new Date(dateField);
                      const formattedDate = date.toLocaleString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }).toLowerCase();
                      detailsHtml += `
                        <div class="card mb-2">
                          <div class="card-header" id="heading${index}" data-toggle="collapse" data-target="#collapse${index}" aria-expanded="false" aria-controls="collapse${index}">
                            <h6 class="mb-0">${formattedDate}</h6>
                          </div>
                          <div id="collapse${index}" class="collapse" aria-labelledby="heading${index}" data-parent="#historyAccordion">
                            <div class="card-body">
                              <p><strong>Consultation Notes:</strong> ${record.consultationNotes || 'N/A'}</p>`;
                      if(record.medications && record.medications.length > 0) {
                        detailsHtml += '<ul>';
                        record.medications.forEach(function(med) {
                          detailsHtml += `
                            <li>
                              <p><strong>Medication:</strong> ${med.medicationName || med.name}</p>
                              <p><strong>Dosage:</strong> ${med.dosage}</p>
                              <p><strong>Frequency:</strong> ${med.frequency}</p>
                              <p><strong>Admin Time:</strong> ${med.adminTime}</p>
                              <p><strong>Instructions:</strong> ${med.additionalInstructions || 'N/A'}</p>
                              <p><strong>Quantity:</strong> ${med.quantity || 'N/A'}</p>
                            </li>`;
                        });
                        detailsHtml += '</ul>';
                      }
                      if(record.schedule && record.schedule.scheduleDate) {
                        detailsHtml += `<p><strong>Follow-Up Date:</strong> ${new Date(record.schedule.scheduleDate).toLocaleString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }).toLowerCase()}</p>`;
                      }
                      detailsHtml += `
                            </div>
                          </div>
                        </div>`;
                    });
                    detailsHtml += '</div>';
                  }
                  $("#consultationDetails").html(detailsHtml);
                  $("#viewConsultationModal").modal("show");
                },
                error: function() {
                  $("#consultationDetails").html(detailsHtml);
                  $("#viewConsultationModal").modal("show");
                }
              });
            } else {
              $("#consultationDetails").html(detailsHtml);
              $("#viewConsultationModal").modal("show");
            }
          } else {
            Swal.fire('Error', response.message || 'Error fetching consultation details.', 'error');
          }
        },
        error: function() {
          Swal.fire('Error', 'Server error while fetching consultation details.', 'error');
        }
      });
    }
    
    // ----------------- Add Consultation (Open Modal) -----------------
    function addConsultation(reservationId) {
      console.log("addConsultation called with reservationId:", reservationId);
      $("#reservationId").val(reservationId);
      $("#consultationModal").modal("show");
    }
    
    // ----------------- Schedule Modal -----------------
    function openScheduleModal(reservationId) {
      $("#scheduleReservationId").val(reservationId);
      $("#scheduleForm")[0].reset();
      $("#scheduleDatePicker").datepicker("destroy");
      $("#scheduleDatePicker").datepicker({
        dateFormat: "yy-mm-dd",
        onSelect: function(dateText) {
          $("#scheduleDate").val(dateText);
        }
      });
      $("#scheduleModal").modal("show");
    }
    
    $("#scheduleForm").submit(function(e) {
      e.preventDefault();
      let scheduleData = $(this).serialize();
      $.ajax({
        url: '/doctor/add-schedule',
        method: 'POST',
        data: scheduleData,
        success: function(response) {
          if(response.success) {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Schedule saved successfully.'
            }).then(() => {
              let row = $("#reservation-" + response.reservation._id);
              row.find("td:nth-child(5)").html(
                `<div>
                  <strong>${new Date(response.reservation.schedule.scheduleDate).toISOString().slice(0,10)}</strong><br>
                  <small>${response.reservation.schedule.scheduleDetails}</small>
                </div>`
              );
              $("#scheduleModal").modal("hide");
            });
          } else {
            Swal.fire('Error', response.message || 'Error saving schedule.', 'error');
          }
        },
        error: function() {
          Swal.fire('Error', 'Server error while saving schedule.', 'error');
        }
      });
    });
    
    // ----------------- Mark as Done -----------------
    function markAsDone(reservationId) {
      Swal.fire({
        title: 'Mark as Done?',
        text: 'Are you sure you want to mark this consultation as done?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, done',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if(result.isConfirmed) {
          $.ajax({
            url: '/doctor/mark-as-done',
            method: 'POST',
            data: { reservationId: reservationId },
            success: function(response) {
              if(response.success) {
                Swal.fire({
                  icon: 'success',
                  title: 'Done',
                  text: 'Consultation marked as done.'
                }).then(() => {
                  $("#reservation-" + reservationId).remove();
                });
              } else {
                Swal.fire('Error', response.message || 'Error marking as done.', 'error');
              }
            },
            error: function() {
              Swal.fire('Error', 'Server error while marking as done.', 'error');
            }
          });
        }
      });
    }
    
    // ----------------- Global Calendar -----------------
    var patientsData = <%- JSON.stringify(patients) %>;
    var scheduledDates = [];
    patientsData.forEach(function(patient) {
      if(patient.schedule && patient.schedule.scheduleDate) {
        var d = new Date(patient.schedule.scheduleDate).toISOString().slice(0,10);
        if(scheduledDates.indexOf(d) === -1) {
          scheduledDates.push(d);
        }
      }
    });
    
    function initGlobalCalendar() {
      $("#globalCalendarPicker").datepicker("destroy");
      $("#globalCalendarPicker").datepicker({
        inline: true,
        dateFormat: "yy-mm-dd",
        beforeShowDay: function(date) {
          let dateString = $.datepicker.formatDate("yy-mm-dd", date);
          if(scheduledDates.indexOf(dateString) !== -1) {
            return [true, "green-highlight", "Scheduled"];
          }
          return [true, "", ""];
        },
        onSelect: function(dateText) {
          let followUps = patientsData.filter(function(patient) {
            if(patient.schedule && patient.schedule.scheduleDate) {
              return new Date(patient.schedule.scheduleDate).toISOString().slice(0,10) === dateText;
            }
            return false;
          });
          let listHtml = "";
          if(followUps.length > 0) {
            followUps.forEach(function(fu) {
              listHtml += "<div><strong>Owner:</strong> " + fu.ownerName + 
                          " &nbsp; <strong>Service:</strong> " + fu.schedule.scheduleDetails + 
                          " &nbsp; <strong>Date:</strong> " + new Date(fu.schedule.scheduleDate).toISOString().slice(0,10) + 
                          "</div><hr>";
            });
          } else {
            listHtml = "<div>No follow-ups for this date.</div>";
          }
          $("#followUpList").html(listHtml);
        }
      });
    }
    
    // ----------------- Append Unit on Physical Examination Fields -----------------
    $("#examWeight").on('blur', function(){
      var value = $(this).val().trim();
      if(value && !value.toLowerCase().endsWith("kg")) {
        $(this).val(value + " kg");
      }
    });
    
    $("#examTemperature").on('blur', function(){
      var value = $(this).val().trim();
      if(value && !value.toLowerCase().endsWith("°c")) {
        $(this).val(value + " °C");
      }
    });
    
    // ----------------- Preview Overview Button -----------------
    $("#btnPreviewOverview").click(function() {
      let examWeight = $("#examWeight").val();
      let examTemperature = $("#examTemperature").val();
      let examOthers = $("#examOthers").val();
      let diagnosis = $("#diagnosis").val();
      let notes = $("#notes").val();
      
      let medications = [];
      $("#medicationTable tbody tr").each(function() {
        let medName = $(this).find(".medication-name").val();
        let dosage = $(this).find("input[name='medications[][dosage]']").val();
        let remarks = $(this).find("input[name='medications[][remarks]']").val();
        let quantity = $(this).find("input[name='medications[][quantity]']").val();
        if(medName || dosage || remarks || quantity) {
          medications.push({ name: medName, dosage, remarks, quantity });
        }
      });
      
      let servicesOverview = [];
      $("#serviceCategoriesContainer .service-category-block").each(function() {
        let category = $(this).find("select.service-category-select option:selected").text();
        let selectedServices = [];
        $(this).find(".service-item").each(function() {
          if($(this).find("input[type='checkbox']").is(":checked")){
            let serviceId = $(this).find("label").data("service-id");
            let serviceName = $(this).find("label").text();
            let details = $(this).find("input[type='text']").val();
            selectedServices.push({ serviceId, serviceName, details });
          }
        });
        servicesOverview.push({ category, selectedServices });
      });
      
      // Gather confinement status values:
      let confinementStatus = [];
      $("input[name='confinementStatus[]']:checked").each(function(){
        confinementStatus.push($(this).val());
      });
      
      let overviewHtml = `<h6>Physical Examination</h6>
        <p><strong>Weight:</strong> ${examWeight || 'N/A'}</p>
        <p><strong>Temperature:</strong> ${examTemperature || 'N/A'}</p>
        <p><strong>Other Observations:</strong> ${examOthers || 'N/A'}</p>
        <hr>
        <h6>Services</h6>`;
      servicesOverview.forEach(function(block) {
        overviewHtml += `<p><strong>Category:</strong> ${block.category}</p>`;
        if(block.selectedServices.length > 0) {
          overviewHtml += `<ul>`;
          block.selectedServices.forEach(function(srv) {
            overviewHtml += `<li>${srv.serviceName}${srv.details ? ' - ' + srv.details : ''}</li>`;
          });
          overviewHtml += `</ul>`;
        } else {
          overviewHtml += `<p>N/A</p>`;
        }
      });
      overviewHtml += `<hr>
        <h6>Diagnosis</h6>
        <p>${diagnosis || 'N/A'}</p>
        <hr>
        <h6>Medications</h6>`;
      if(medications.length > 0) {
        overviewHtml += `<table class="table table-sm">
          <thead>
            <tr>
              <th>Medication</th>
              <th>Dosage</th>
              <th>Remarks</th>
              <th>Quantity</th>
            </tr>
          </thead>
          <tbody>`;
        medications.forEach(function(med) {
          overviewHtml += `<tr>
            <td>${med.name || 'N/A'}</td>
            <td>${med.dosage || 'N/A'}</td>
            <td>${med.remarks || 'N/A'}</td>
            <td>${med.quantity || 'N/A'}</td>
          </tr>`;
        });
        overviewHtml += `</tbody></table>`;
      } else {
        overviewHtml += `<p>N/A</p>`;
      }
      overviewHtml += `<hr>
        <h6>Notes</h6>
        <p>${notes || 'N/A'}</p>
        <hr>
        <h6>Confinement Status</h6>
        <p>${confinementStatus.length > 0 ? confinementStatus.join(", ") : "N/A"}</p>`;
      
      $("#overviewContent").html(overviewHtml);
    });
  </script>
</body>
</html>
