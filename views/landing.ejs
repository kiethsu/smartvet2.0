<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>SmartVet - Casa Animalia</title>
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://www.google.com/recaptcha/api.js" async defer></script>
  <style>
    :root {
      --primary-color: #4B9CD3; /* Carolina blue */
      --secondary-color: #ffffff; /* White */
      --text-color: #333333;
    }
    /* Global Styles */
    body, html {
      height: 100%;
      background: linear-gradient(to right, #54c3e6, #005a8d);
      color: white;
      font-family: 'Roboto', sans-serif;
      margin: 0;
      padding: 0;
    }
    /* Navbar Styles */
    .navbar {
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      background-color: var(--secondary-color);
    }
    .navbar-brand {
      display: flex;
      align-items: center;
      gap: 0.25rem;
      font-weight: 700;
      font-size: 1rem;
    }
    .navbar-brand i {
      font-size: 1rem;
    }
    .navbar-nav {
      align-items: center;
    }
    .nav-link {
      font-size: 1.1rem;
      font-weight: 500;
      transition: color 0.3s ease;
      cursor: pointer;
      color: var(--primary-color) !important;
    }
    .nav-link:hover {
      color: #005a8d !important;
    }
    /* Sections common padding */
    section {
      padding: 60px 0;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    /* Hero Section */
    #homeSection {
      height: calc(100vh - 56px);
      display: flex;
      align-items: center;
      padding: 0 3%;
      background: linear-gradient(to right, #54c3e6, #005a8d);
      color: white;
    }
    #homeSection .container {
      min-height: calc(100vh - 56px);
    }
    .hero-content {
      max-width: 50%;
    }
    .hero-content h1 {
      font-size: 4.5rem;
      font-weight: 700;
      text-shadow: 2px 2px 6px rgba(0,0,0,0.3);
      margin-bottom: 20px;
      text-align: left;
    }
    .hero-content p {
      font-size: 1.5rem;
      margin-bottom: 30px;
      line-height: 1.5;
      text-align: left;
    }
    .btn-primary {
      font-size: 1.25rem;
      padding: 12px 30px;
      margin-top: 20px;
      border-radius: 8px;
      transition: background-color 0.3s ease;
      background-color: #4B9CD3;
      border: none;
      color: white;
    }
    .btn-primary:hover {
      background-color: #003f66;
    }
    .image-container {
      height: 450px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .image-container img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
    }
    @media (max-width: 768px) {
      #homeSection {
        flex-direction: column;
        text-align: center;
        padding-top: 30px;
      }
      .hero-content {
        max-width: 100%;
        text-align: center;
      }
      .hero-content h1 {
        font-size: 3.5rem;
      }
    }
    /* Modal & Input Styling Adjustments */
    .input-size {
      height: 40px;
      font-size: 16px;
    }
    .btn.input-size {
      height: 40px;
      font-size: 16px;
      line-height: 40px;
      padding: 0 20px;
    }
    .input-group .btn,
    .input-group-text {
      height: 40px;
      border-radius: 0 5px 5px 0;
      cursor: pointer;
      background: #fff;
      border: 1px solid #ced4da;
    }
    .input-group input {
      border-radius: 5px 0 0 5px;
    }
    .toggle-password,
    .toggle-password-login,
    .toggle-password-reset,
    .toggle-password-reset-confirm {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      padding: 0;
      cursor: pointer;
      background: #fff;
      border: 1px solid #ced4da;
    }
    .toggle-password i,
    .toggle-password-login i,
    .toggle-password-reset i,
    .toggle-password-reset-confirm i {
      font-size: 16px;
      color: #333;
    }
    #registerBtn, #loginBtn {
      font-size: 16px;
      padding: 8px 20px;
    }
    #registerBtn {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .modal-body label {
      color: #333 !important;
      font-weight: 500;
    }
    .modal-content {
      border-radius: 12px;
      padding: 20px;
      box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    }
    .modal-header {
      border-bottom: none;
      border-radius: 12px 12px 0 0;
    }
    /* Admin OTP Modal */
    #verifyAdminOTPBtn {
      font-size: 16px;
      font-weight: bold;
      padding: 10px 24px;
      border-radius: 8px;
      transition: background-color 0.3s ease;
    }
    #verifyAdminOTPBtn:hover {
      background-color: #003366;
      color: white;
    }
    .modal-dialog {
      max-width: 400px;
    }
    @media (max-width: 576px) {
      .modal-dialog {
        margin: 0 auto;
        width: 95%;
        max-width: none;
      }
    }
    /* About Section Styles */
    #aboutSection {
      background-color: #f8f9fa;
      color: #333;
      padding: 60px 0;
    }
    #aboutSection h2,
    #aboutSection h3 {
      text-align: center;
      color: var(--primary-color);
      margin-bottom: 20px;
    }
    #aboutSection p {
      text-align: center;
      white-space: pre-wrap;
      word-wrap: break-word;
      overflow-wrap: break-word;
      margin-bottom: 40px;
      font-size: 1.1rem;
    }
    /* Doctors Subsection */
    #aboutSection .doctor-container {
      overflow-x: auto;
      padding-bottom: 10px;
    }
    #aboutSection .doctor-container .d-flex {
      flex-wrap: nowrap;
    }
    #aboutSection .card {
      border: 1px solid #ddd;
      margin: 0 10px;
      min-width: 18rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    #aboutSection .card img {
      height: 200px;
      object-fit: contain;
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;
    }
    /* Thin scrollbar for doctor container */
    #aboutSection .doctor-container::-webkit-scrollbar {
      height: 4px;
    }
    #aboutSection .doctor-container::-webkit-scrollbar-thumb {
      background: rgba(0, 0, 0, 0.2);
      border-radius: 2px;
    }
    /* Services Subsection */
    #aboutSection .service-card {
      border: 1px solid #ddd;
      margin-bottom: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    #aboutSection .service-card .card-body {
      background-color: var(--primary-color);
      color: var(--secondary-color);
      position: relative;
      padding-top: 50px;
    }
    /* Add an icon to each service card */
    #aboutSection .service-card .card-body::before {
      content: "\f0e7"; /* Font Awesome bolt icon */
      font-family: "Font Awesome 6 Free";
      font-weight: 900;
      font-size: 2rem;
      position: absolute;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      color: var(--secondary-color);
    }
    @media (max-width: 768px) {
      #aboutSection {
        padding: 30px 15px;
      }
      #aboutSection p {
        font-size: 1rem;
      }
      #aboutSection .doctor-container .d-flex {
        flex-wrap: wrap;
        justify-content: center;
      }
    }
    /* Contact Section Styles */
    #contactSection {
      background-color: #fff;
      color: #333;
      padding: 60px 0;
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-white">
    <div class="container">
      <a class="navbar-brand" href="#">
        <i class="fa-solid fa-paw" style="color: #264653; font-size: 22px; margin-right: 5px;"></i>
        <span style="color: #264653; font-weight: bold;">Smart Vet</span>
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item"><a class="nav-link" href="#homeSection" id="homeNav">Home</a></li>
          <li class="nav-item"><a class="nav-link" href="#" id="loginNav" data-bs-toggle="modal" data-bs-target="#loginModal">Login</a></li>
          <li class="nav-item"><a class="nav-link" href="#aboutSection" id="aboutNav">About</a></li>
          <li class="nav-item"><a class="nav-link" href="#contactSection" id="contactNav">Contact</a></li>
        </ul>
      </div>
    </div>
  </nav>
  
  <!-- Home Section (Landing Hero) -->
  <section id="homeSection">
    <div class="container d-flex flex-wrap align-items-center justify-content-between">
      <div class="hero-content">
        <h1>CASA ANIMALIA</h1>
        <p>
          Quickly book appointments and access essential pet health information all in one place
        </p>
        <div>
          <a href="#" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#loginModal">GET STARTED</a>
        </div>
      </div>
      <div class="image-container">
        <img src="/catddd.png" alt="Casa Animalia">
      </div>
    </div>
  </section>
  
  <!-- About Section -->
  <section id="aboutSection">
    <div class="container">
      <h2 class="mb-4">About Our Clinic</h2>
      <p>
        <%= about && about.aboutDescription ? about.aboutDescription : "Welcome to Smart Vet, where compassionate care meets advanced veterinary services. Our dedicated team is committed to providing your pet with the highest quality care." %>
      </p>
      <h3 class="mb-3">Doctors</h3>
      <% if (about && about.doctors && about.doctors.length > 0) { %>
        <div class="doctor-container">
          <div class="d-flex flex-nowrap">
            <% about.doctors.forEach(function(doc) { %>
              <div class="card">
                <img src="<%= doc.pic ? doc.pic : 'https://via.placeholder.com/350x200' %>" class="card-img-top" alt="<%= doc.name %>">
                <div class="card-body text-center">
                  <h5 class="card-title"><%= doc.name %></h5>
                  <p class="card-text"><%= doc.description %></p>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      <% } else { %>
        <p class="text-center">No doctor information available at the moment.</p>
      <% } %>
      <h3 class="mt-4">Our Services</h3>
      <% if (about && about.services && about.services.length > 0) { %>
        <div class="row">
          <% about.services.forEach(function(service) { %>
            <div class="col-md-3 col-sm-6 mb-3">
              <div class="card service-card">
                <div class="card-body text-center">
                  <h5 class="card-title"><%= service %></h5>
                </div>
              </div>
            </div>
          <% }); %>
        </div>
      <% } else { %>
        <p class="text-center">No services information available at the moment.</p>
      <% } %>
    </div>
  </section>

  <!-- Contact Section -->
  <section id="contactSection" style="display:none;">
    <div class="container">
      <h2 class="text-center mb-4">Contact Us</h2>
      <div class="row">
        <div class="col-md-6 mb-4">
          <iframe src="https://maps.google.com/maps?q=Vet%20Clinic%20Location&t=&z=13&ie=UTF8&iwloc=&output=embed" width="100%" height="300" style="border:0;" allowfullscreen="" loading="lazy"></iframe>
        </div>
        <div class="col-md-6">
          <form id="contactForm">
            <div class="mb-3">
              <label for="contactName" class="form-label">Name</label>
              <input type="text" class="form-control" id="contactName" placeholder="Your Name" required>
            </div>
            <div class="mb-3">
              <label for="contactEmail" class="form-label">Email</label>
              <input type="email" class="form-control" id="contactEmail" placeholder="Your Email" required>
            </div>
            <div class="mb-3">
              <label for="contactMessage" class="form-label">Message</label>
              <textarea class="form-control" id="contactMessage" rows="4" placeholder="Your Message" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary w-100">Send Message</button>
          </form>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Login Modal -->
  <div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-dark" id="loginModalLabel">Login</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="loginForm">
            <div class="mb-2">
                <label for="login-identifier" class="form-label">Email</label>
                <input type="text" class="form-control input-size" id="login-identifier" placeholder="Enter email" />
                <small id="email-error" class="text-danger d-none"></small>
            </div>
            <div class="mb-2 position-relative">
                <label for="login-password" class="form-label">Password</label>
                <div class="input-group">
                    <input type="password" class="form-control input-size" id="login-password" placeholder="Enter password" />
                    <span class="input-group-text toggle-password-login"><i class="bi bi-eye-slash"></i></span>
                </div>
                <small id="password-error" class="text-danger d-none"></small>
            </div>
            <div class="mb-3">
              <div class="g-recaptcha" data-sitekey="6LcpivkqAAAAALHpjUEaCGauJXtB4zQb9L-dULHa"></div>
            </div>
            <div class="mb-2">
                <a href="#" id="openForgotPasswordModal" class="text-primary small">Forgot Password?</a>
            </div>
            <div class="text-center mt-2">
                <button type="button" class="btn btn-primary w-100" id="loginBtn">Login</button>
            </div>
          </form>
          <div class="mt-3 text-center">
            <span class="small" style="color: gray;">
              Don't have an account?
              <a href="#" id="openRegisterModal" class="text-primary">Create one</a>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Register Modal -->
  <div class="modal fade" id="registerModal" tabindex="-1" aria-labelledby="registerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-dark" id="registerModalLabel">Register</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="registerSuccess" class="alert alert-success d-none" role="alert">
            Successfully registered!
          </div>
          <form id="registerForm">
            <div id="reg-step1">
              <div class="mb-2">
                <label for="reg-username" class="form-label">Username</label>
                <input type="text" class="form-control input-size" id="reg-username" placeholder="Enter username" />
                <small id="username-feedback" class="text-danger"></small>
              </div>
              <div class="mb-2 position-relative">
                <label for="reg-password" class="form-label">Password</label>
                <div class="input-group">
                  <input type="password" class="form-control input-size" id="reg-password" placeholder="Enter password" />
                  <span class="input-group-text toggle-password"><i class="bi bi-eye-slash"></i></span>
                </div>
                <div id="password-checklist" class="mt-2">
                  <small id="criteria-length" class="d-block text-danger">• 8+ characters</small>
                  <small id="criteria-uppercase" class="d-block text-danger">• Uppercase letter</small>
                  <small id="criteria-lowercase" class="d-block text-danger">• Lowercase letter</small>
                  <small id="criteria-number" class="d-block text-danger">• Number</small>
                  <small id="criteria-symbol" class="d-block text-danger">• Special character (!@#$%^&*)</small>
                </div>
              </div>
              <div class="text-center">
                <button type="button" class="btn btn-primary input-size w-100" id="nextBtn">Next</button>
              </div>
            </div>
            <div id="reg-step2" style="display:none;">
              <div class="mb-2">
                <label for="reg-email" class="form-label">Email</label>
                <div class="d-flex">
                  <input type="email" class="form-control input-size" id="reg-email" placeholder="Enter email" />
                  <button type="button" class="btn btn-secondary ms-2 input-size" id="sendCodeBtn" disabled>Send</button>
                </div>
                <small id="email-feedback" class="text-danger"></small>
              </div>
              <div class="mb-2">
                <label class="form-label">Verification Code</label>
                <input type="text" class="form-control input-size" id="otp-code" placeholder="Enter OTP" />
                <div class="invalid-feedback">Invalid OTP.</div>
                <small id="otp-info" class="text-muted d-none">Check your email for OTP</small>
              </div>
              <div class="text-center">
                <button type="button" class="btn btn-primary input-size w-100" id="registerBtn">Register</button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Admin OTP Verification Modal -->
  <div class="modal fade" id="adminOTPModal" tabindex="-1" aria-labelledby="adminOTPModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content shadow-lg">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title" id="adminOTPModalLabel">Admin OTP Verification</h5>
          <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="adminOTPForm">
            <input type="hidden" id="admin-email" />
            <div class="mb-3 text-center">
              <label for="admin-otp" class="form-label fw-bold text-dark">Enter OTP</label>
              <input type="text" class="form-control text-center input-size" id="admin-otp" placeholder="6-digit OTP" maxlength="6" />
            </div>
            <div class="text-center">
              <button type="button" class="btn btn-primary px-4 py-2" id="verifyAdminOTPBtn">
                Verify OTP <i class="bi bi-shield-lock"></i>
              </button>
            </div>
            <div class="text-center mt-3">
              <small class="text-muted">
                Didn't receive the code?
                <a href="#" class="text-primary" id="resendOTP">Resend OTP</a>
              </small>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Forgot Password Modal -->
  <div class="modal fade" id="forgotPasswordModal" tabindex="-1" aria-labelledby="forgotPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-dark" id="forgotPasswordModalLabel">Forgot Password</h5>
          <button type="button" class="btn-close" id="forgotCloseBtn" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="step1">
            <label for="reset-email" class="form-label">Email Address</label>
            <p id="instruction-text" class="small text-muted">
              Enter your registered email address below and click "Send OTP" to receive a verification code for password reset.
            </p>
            <input type="email" class="form-control input-size" id="reset-email" placeholder="Enter email" />
            <small id="reset-email-error" class="text-danger d-none"></small>
            <button type="button" class="btn btn-primary input-size w-100 mt-3" id="sendResetOTPBtn">Send OTP</button>
          </div>
          <div id="step2" style="display:none;">
            <label for="reset-otp" class="form-label">Enter OTP</label>
            <p class="small text-muted">
              Check your email for a 6-digit OTP. Enter the OTP below to proceed.
            </p>
            <input type="text" class="form-control input-size" id="reset-otp" placeholder="Enter OTP" />
            <div id="otpError" class="text-danger mt-1 d-none">Invalid OTP</div>
            <button type="button" class="btn btn-primary input-size w-100 mt-3" id="verifyResetOTPBtn">Verify OTP</button>
            <small id="otpInfo" class="text-muted d-block mt-2">
              Didn't receive an OTP? <a href="#" id="resendOTP" class="text-primary">Resend OTP</a>
            </small>
          </div>
          <div id="step3" style="display:none;">
            <label for="new-password" class="form-label">New Password</label>
            <div class="input-group mb-2">
              <input type="password" class="form-control input-size" id="new-password" placeholder="Enter new password" />
              <span class="input-group-text toggle-password-reset"><i class="bi bi-eye-slash"></i></span>
            </div>
            <small id="new-password-error" class="text-danger d-none">Please fill out this field.</small>
            <div id="password-reset-checklist" class="mt-2">
              <small id="reset-criteria-length" class="d-block text-danger">• 8+ characters</small>
              <small id="reset-criteria-uppercase" class="d-block text-danger">• Uppercase letter</small>
              <small id="reset-criteria-lowercase" class="d-block text-danger">• Lowercase letter</small>
              <small id="reset-criteria-number" class="d-block text-danger">• Number</small>
              <small id="reset-criteria-symbol" class="d-block text-danger">• Special character (!@#$%^&*)</small>
            </div>
            <label for="confirm-new-password" class="form-label mt-2">Confirm New Password</label>
            <div class="input-group mb-2">
              <input type="password" class="form-control input-size" id="confirm-new-password" placeholder="Confirm new password" />
              <span class="input-group-text toggle-password-reset-confirm"><i class="bi bi-eye-slash"></i></span>
            </div>
            <small id="confirm-password-error" class="text-danger d-none">Please fill out this field.</small>
            <small id="password-mismatch-error" class="text-danger d-none">Passwords do not match.</small>
            <button type="button" class="btn btn-primary input-size w-100 mt-3" id="resetPasswordBtn">Reset Password</button>
            <small class="text-muted d-block mt-2">Ensure your new password meets the security requirements.</small>
            <div id="password-reset-success" class="alert alert-success d-none mt-3" role="alert">
              Password successfully changed!
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Navigation Switching -->
  <script>
    document.addEventListener('DOMContentLoaded', function(){
      const homeSection = document.getElementById('homeSection');
      const aboutSection = document.getElementById('aboutSection');
      const contactSection = document.getElementById('contactSection');
      
      homeSection.style.display = 'block';
      aboutSection.style.display = 'none';
      contactSection.style.display = 'none';
      
      document.getElementById('homeNav').addEventListener('click', function(e){
        e.preventDefault();
        homeSection.style.display = 'block';
        aboutSection.style.display = 'none';
        contactSection.style.display = 'none';
      });
      document.getElementById('aboutNav').addEventListener('click', function(e){
        e.preventDefault();
        homeSection.style.display = 'none';
        aboutSection.style.display = 'block';
        contactSection.style.display = 'none';
      });
      document.getElementById('contactNav').addEventListener('click', function(e){
        e.preventDefault();
        homeSection.style.display = 'none';
        aboutSection.style.display = 'none';
        contactSection.style.display = 'block';
      });
    });
  </script>
  
  <!-- JavaScript: Modal & Form Logic -->
  <script>
    /* ---------------------------------------------
       Switching Modals: Login <-> Register
    --------------------------------------------- */
    document.getElementById("openRegisterModal").addEventListener("click", function (event) {
      event.preventDefault();
      var loginModalEl = document.getElementById("loginModal");
      var registerModalEl = document.getElementById("registerModal");
      var loginModal = bootstrap.Modal.getInstance(loginModalEl);
      var registerModal = new bootstrap.Modal(registerModalEl, { backdrop: "static", keyboard: false });
      loginModal.hide();
      setTimeout(() => {
        registerModal.show();
      }, 300);
      registerModalEl.addEventListener("hidden.bs.modal", function () {
          var reopenLoginModal = new bootstrap.Modal(loginModalEl, { backdrop: "static", keyboard: false });
          reopenLoginModal.show();
      }, { once: true });
    });
    
    // Step 1 "Next" button event handler.
    document.getElementById("nextBtn").addEventListener("click", () => {
      document.querySelector("#reg-username").classList.remove("is-invalid");
      document.querySelector("#reg-password").classList.remove("is-invalid");
      const username = document.querySelector("#reg-username").value.trim();
      const password = document.querySelector("#reg-password").value;
      const usernameFeedback = document.querySelector("#username-feedback");
      let valid = true;
      if (!username) {
        document.querySelector("#reg-username").classList.add("is-invalid");
        valid = false;
      }
      if (usernameFeedback.classList.contains("text-danger") && usernameFeedback.textContent.trim() !== "") {
        document.querySelector("#reg-username").classList.add("is-invalid");
        valid = false;
      }
      const lengthCriteria = password.length >= 8;
      const uppercaseCriteria = /[A-Z]/.test(password);
      const lowercaseCriteria = /[a-z]/.test(password);
      const numberCriteria = /[0-9]/.test(password);
      const specialCharCriteria = /[!@#$%^&*]/.test(password);
      if (!(lengthCriteria && uppercaseCriteria && lowercaseCriteria && numberCriteria && specialCharCriteria)) {
        document.querySelector("#reg-password").classList.add("is-invalid");
        valid = false;
      }
      if (valid) {
        document.getElementById("reg-step1").style.display = "none";
        document.getElementById("reg-step2").style.display = "block";
      }
    });
    
    // Send OTP to Email (Register Modal)
    document.querySelector("#sendCodeBtn").addEventListener("click", async () => {
      const email = document.querySelector("#reg-email").value;
      if (!email) return alert("Enter an email!");
      let response = await fetch("/send-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });
      let data = await response.json();
      if (data.message.includes("OTP sent")) {
        const otpInfo = document.getElementById("otp-info");
        otpInfo.textContent = "Check your email for OTP";
        otpInfo.classList.remove("d-none");
      }
      const sendBtn = document.getElementById("sendCodeBtn");
      sendBtn.disabled = true;
      let countdown = 60;
      const originalText = "Send";
      const timerInterval = setInterval(() => {
        sendBtn.textContent = `${countdown}s`;
        countdown--;
        if (countdown < 0) {
          clearInterval(timerInterval);
          sendBtn.textContent = originalText;
          sendBtn.disabled = false;
        }
      }, 1000);
    });
    
    // Real-Time Email Availability Check for Register Modal (with Gmail check)
    document.querySelector("#reg-email").addEventListener("input", async function () {
      const email = this.value.trim();
      const feedbackElement = document.querySelector("#email-feedback");
      const sendButton = document.querySelector("#sendCodeBtn");
      if (!email) {
        feedbackElement.textContent = "";
        sendButton.disabled = true;
        return;
      }
      if (!email.includes("@gmail.com")) {
        feedbackElement.textContent = "Email must be a Gmail address.";
        feedbackElement.classList.remove("text-success");
        feedbackElement.classList.add("text-danger");
        sendButton.disabled = true;
        return;
      }
      try {
        let response = await fetch(`/check-email?email=${encodeURIComponent(email)}`);
        let data = await response.json();
        if (data.available) {
          feedbackElement.textContent = "Email is available!";
          feedbackElement.classList.remove("text-danger");
          feedbackElement.classList.add("text-success");
          sendButton.disabled = false;
        } else {
          feedbackElement.textContent = data.message;
          feedbackElement.classList.remove("text-success");
          feedbackElement.classList.add("text-danger");
          sendButton.disabled = true;
        }
      } catch (error) {
        console.error("Error checking email:", error);
        feedbackElement.textContent = "Error checking email!";
        feedbackElement.classList.add("text-danger");
        sendButton.disabled = true;
      }
    });
    
    // Register User
    document.querySelector("#registerBtn").addEventListener("click", async () => {
      document.querySelector("#reg-username").classList.remove("is-invalid");
      document.querySelector("#reg-password").classList.remove("is-invalid");
      document.querySelector("#reg-email").classList.remove("is-invalid");
      document.querySelector("#otp-code").classList.remove("is-invalid");
      const username = document.querySelector("#reg-username").value.trim();
      const password = document.querySelector("#reg-password").value;
      const email = document.querySelector("#reg-email").value.trim();
      const otp = document.querySelector("#otp-code").value.trim();
      let valid = true;
      if (!username) {
        document.querySelector("#reg-username").classList.add("is-invalid");
        valid = false;
      }
      const lengthCriteria = password.length >= 8;
      const uppercaseCriteria = /[A-Z]/.test(password);
      const lowercaseCriteria = /[a-z]/.test(password);
      const numberCriteria = /[0-9]/.test(password);
      const specialCharCriteria = /[!@#$%^&*]/.test(password);
      if (!(lengthCriteria && uppercaseCriteria && lowercaseCriteria && numberCriteria && specialCharCriteria)) {
        document.querySelector("#reg-password").classList.add("is-invalid");
        valid = false;
      }
      if (!email || !email.includes("@gmail.com")) {
        document.querySelector("#reg-email").classList.add("is-invalid");
        valid = false;
      }
      if (!otp) {
        document.querySelector("#otp-code").classList.add("is-invalid");
        valid = false;
      }
      if (!valid) {
        return;
      }
      const registerBtn = document.querySelector("#registerBtn");
      registerBtn.textContent = "Loading...";
      registerBtn.disabled = true;
      let response = await fetch("/verify-register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password, email, otp }),
      });
      let data = await response.json();
      if (data.message === "Successfully registered!") {
        const registerSuccessDiv = document.getElementById("registerSuccess");
        registerSuccessDiv.textContent = "Successfully registered!";
        registerSuccessDiv.classList.remove("d-none");
        registerBtn.textContent = "Register";
        registerBtn.disabled = false;
        setTimeout(() => {
          const registerModalEl = document.getElementById("registerModal");
          const registerModal = bootstrap.Modal.getInstance(registerModalEl);
          registerModal.hide();
          const loginModalEl = document.getElementById("loginModal");
          const loginModal = new bootstrap.Modal(loginModalEl, { backdrop: "static", keyboard: false });
          loginModal.show();
        }, 800);
      }
      else if (data.message.toLowerCase().includes("otp")) {
        document.querySelector("#otp-code").classList.add("is-invalid");
        registerBtn.textContent = "Register";
        registerBtn.disabled = false;
      } else {
        alert(data.message);
        registerBtn.textContent = "Register";
        registerBtn.disabled = false;
      }
    });
    
    document.querySelector("#otp-code").addEventListener("input", function () {
      this.classList.remove("is-invalid");
    });
    
    // Password Checklist for Register Modal
    document.querySelector("#reg-password").addEventListener("input", function () {
      const password = this.value;
      const lengthCriteria = password.length >= 8;
      const uppercaseCriteria = /[A-Z]/.test(password);
      const lowercaseCriteria = /[a-z]/.test(password);
      const numberCriteria = /[0-9]/.test(password);
      const specialCharCriteria = /[!@#$%^&*]/.test(password);
      document.getElementById("criteria-length").classList.toggle("text-success", lengthCriteria);
      document.getElementById("criteria-length").classList.toggle("text-danger", !lengthCriteria);
      document.getElementById("criteria-uppercase").classList.toggle("text-success", uppercaseCriteria);
      document.getElementById("criteria-uppercase").classList.toggle("text-danger", !uppercaseCriteria);
      document.getElementById("criteria-lowercase").classList.toggle("text-success", lowercaseCriteria);
      document.getElementById("criteria-lowercase").classList.toggle("text-danger", !lowercaseCriteria);
      document.getElementById("criteria-number").classList.toggle("text-success", numberCriteria);
      document.getElementById("criteria-number").classList.toggle("text-danger", !numberCriteria);
      document.getElementById("criteria-symbol").classList.toggle("text-success", specialCharCriteria);
      document.getElementById("criteria-symbol").classList.toggle("text-danger", !specialCharCriteria);
    });
    
    // Ensure modals don’t close when clicking outside
    document.querySelectorAll(".modal").forEach((modal) => {
      modal.addEventListener("shown.bs.modal", function () {
        var modalInstance = bootstrap.Modal.getInstance(this);
        modalInstance._config.backdrop = "static";
        modalInstance._config.keyboard = false;
      });
    });
    
    // Custom close for Forgot Password Modal
    document.getElementById("forgotCloseBtn").addEventListener("click", function () {
      let modalEl = document.getElementById("forgotPasswordModal");
      let modalInstance = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
      modalInstance.hide();
    });
    
    document.querySelectorAll(".btn-close").forEach((btn) => {
      if (btn.id !== "forgotCloseBtn") {
        btn.addEventListener("click", function () {
          var modalEl = this.closest(".modal");
          var modalInstance = bootstrap.Modal.getInstance(modalEl);
          modalInstance.hide();
        });
      }
    });
    
    // Login User
    document.querySelector("#loginBtn").addEventListener("click", async (event) => {
      event.preventDefault();
      const emailInput = document.querySelector("#login-identifier");
      const passwordInput = document.querySelector("#login-password");
      const emailError = document.querySelector("#email-error");
      const passwordError = document.querySelector("#password-error");
      emailError.classList.add("d-none");
      passwordError.classList.add("d-none");
      
      const email = emailInput.value.trim();
      const password = passwordInput.value.trim();
      if (!email || !password) {
        if (!email) {
          emailError.textContent = "Please enter your Gmail.";
          emailError.classList.remove("d-none");
        }
        if (!password) {
          passwordError.textContent = "Please enter your password.";
          passwordError.classList.remove("d-none");
        }
        return;
      }
      
      const captchaResponse = grecaptcha.getResponse();
      if (!captchaResponse) {
        alert("Please complete the CAPTCHA.");
        return;
      }
      
      let response = await fetch("/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password, captchaResponse })
      });
      
      if (response.status === 429) {
        const data = await response.json();
        alert(data.message || "Too many failed attempts. Please try again in 5 minutes.");
        const loginBtn = document.querySelector("#loginBtn");
        loginBtn.disabled = true;
        let countdown = 300;
        const originalText = loginBtn.textContent;
        const intervalId = setInterval(() => {
          loginBtn.textContent = `Wait ${countdown} seconds`;
          countdown--;
          if (countdown < 0) {
            clearInterval(intervalId);
            loginBtn.textContent = originalText;
            loginBtn.disabled = false;
          }
        }, 1000);
        return;
      }
      
      const data = await response.json();
      
      if (data.passwordError) {
        passwordError.textContent = data.passwordError;
        passwordError.classList.remove("d-none");
      } else if (data.emailError) {
        emailError.textContent = data.emailError;
        emailError.classList.remove("d-none");
      } else if (data.requireOTP) {
        var loginModal = bootstrap.Modal.getInstance(document.getElementById("loginModal"));
        var adminOTPModal = new bootstrap.Modal(document.getElementById("adminOTPModal"));
        loginModal.hide();
        document.body.classList.remove("modal-open");
        document.querySelector(".modal-backdrop")?.remove();
        document.querySelector("#admin-email").value = email;
        adminOTPModal.show();
      } else if (data.message && data.message.includes("successful")) {
        window.location.href = data.redirect;
      }
    });
    
    // Verify Admin OTP
    document.querySelector("#verifyAdminOTPBtn").addEventListener("click", async () => {
      const email = document.querySelector("#admin-email").value;
      const otp = document.querySelector("#admin-otp").value;
      if (!otp) return alert("Enter OTP!");
      let response = await fetch("/verify-admin-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, otp }),
      });
      let data = await response.json();
      alert(data.message);
      if (data.message.includes("OTP verified")) {
        window.location.href = data.redirect;
      }
    });
    
    // Toggle password visibility in Register Modal
    document.querySelector(".toggle-password").addEventListener("click", function () {
      const passwordInput = document.querySelector("#reg-password");
      const icon = this.querySelector("i");
      if (passwordInput.type === "password") {
        passwordInput.type = "text";
        icon.classList.remove("bi-eye-slash");
        icon.classList.add("bi-eye");
      } else {
        passwordInput.type = "password";
        icon.classList.remove("bi-eye");
        icon.classList.add("bi-eye-slash");
      }
    });
    
    // Toggle password visibility in Login Modal
    document.querySelector(".toggle-password-login").addEventListener("click", function () {
      const passwordInput = document.querySelector("#login-password");
      const icon = this.querySelector("i");
      if (passwordInput.type === "password") {
        passwordInput.type = "text";
        icon.classList.remove("bi-eye-slash");
        icon.classList.add("bi-eye");
      } else {
        passwordInput.type = "password";
        icon.classList.remove("bi-eye");
        icon.classList.add("bi-eye-slash");
      }
    });
    
    // Real-time username check
    document.querySelector("#reg-username").addEventListener("input", async function () {
      const username = this.value.trim();
      const feedbackElement = document.querySelector("#username-feedback");
      if (!username) {
        feedbackElement.textContent = "";
        return;
      }
      try {
        let response = await fetch(`/check-username?username=${encodeURIComponent(username)}`);
        let data = await response.json();
        if (data.available) {
          feedbackElement.textContent = "Username is available!";
          feedbackElement.classList.remove("text-danger");
          feedbackElement.classList.add("text-success");
        } else {
          feedbackElement.textContent = data.message;
          feedbackElement.classList.remove("text-success");
          feedbackElement.classList.add("text-danger");
        }
      } catch (error) {
        console.error("Error checking username:", error);
        feedbackElement.textContent = "Error checking username!";
        feedbackElement.classList.add("text-danger");
      }
    });
    
    // Real-Time Email Availability Check for Register Modal (with Gmail check)
    document.querySelector("#reg-email").addEventListener("input", async function () {
      const email = this.value.trim();
      const feedbackElement = document.querySelector("#email-feedback");
      const sendButton = document.querySelector("#sendCodeBtn");
      if (!email) {
        feedbackElement.textContent = "";
        sendButton.disabled = true;
        return;
      }
      if (!email.includes("@gmail.com")) {
        feedbackElement.textContent = "Email must be a Gmail address.";
        feedbackElement.classList.remove("text-success");
        feedbackElement.classList.add("text-danger");
        sendButton.disabled = true;
        return;
      }
      try {
        let response = await fetch(`/check-email?email=${encodeURIComponent(email)}`);
        let data = await response.json();
        if (data.available) {
          feedbackElement.textContent = "Email is available!";
          feedbackElement.classList.remove("text-danger");
          feedbackElement.classList.add("text-success");
          sendButton.disabled = false;
        } else {
          feedbackElement.textContent = data.message;
          feedbackElement.classList.remove("text-success");
          feedbackElement.classList.add("text-danger");
          sendButton.disabled = true;
        }
      } catch (error) {
        console.error("Error checking email:", error);
        feedbackElement.textContent = "Error checking email!";
        feedbackElement.classList.add("text-danger");
        sendButton.disabled = true;
      }
    });
    
    // Password Strength Validation with Checklist for Register Modal
    document.querySelector("#reg-password").addEventListener("input", function () {
      const password = this.value;
      const lengthCriteria = password.length >= 8;
      const uppercaseCriteria = /[A-Z]/.test(password);
      const lowercaseCriteria = /[a-z]/.test(password);
      const numberCriteria = /[0-9]/.test(password);
      const specialCharCriteria = /[!@#$%^&*]/.test(password);
      document.getElementById("criteria-length").classList.toggle("text-success", lengthCriteria);
      document.getElementById("criteria-length").classList.toggle("text-danger", !lengthCriteria);
      document.getElementById("criteria-uppercase").classList.toggle("text-success", uppercaseCriteria);
      document.getElementById("criteria-uppercase").classList.toggle("text-danger", !uppercaseCriteria);
      document.getElementById("criteria-lowercase").classList.toggle("text-success", lowercaseCriteria);
      document.getElementById("criteria-lowercase").classList.toggle("text-danger", !lowercaseCriteria);
      document.getElementById("criteria-number").classList.toggle("text-success", numberCriteria);
      document.getElementById("criteria-number").classList.toggle("text-danger", !numberCriteria);
      document.getElementById("criteria-symbol").classList.toggle("text-success", specialCharCriteria);
      document.getElementById("criteria-symbol").classList.toggle("text-danger", !specialCharCriteria);
    });
    
    // Open Forgot Password Modal
    document.getElementById("openForgotPasswordModal").addEventListener("click", function (event) {
      event.preventDefault();
      var loginModalEl = document.getElementById("loginModal");
      var forgotPasswordModalEl = document.getElementById("forgotPasswordModal");
      var loginModal = bootstrap.Modal.getInstance(loginModalEl);
      var forgotPasswordModal = new bootstrap.Modal(forgotPasswordModalEl, { backdrop: "static", keyboard: false });
      loginModal.hide();
      setTimeout(() => {
        forgotPasswordModal.show();
      }, 300);
      forgotPasswordModalEl.addEventListener("hidden.bs.modal", function () {
          var reopenLoginModal = new bootstrap.Modal(loginModalEl, { backdrop: "static", keyboard: false });
          reopenLoginModal.show();
      }, { once: true });
    });
    
    // Send OTP Button for Forgot Password (Step 1 -> Step 2)
    document.getElementById("sendResetOTPBtn").addEventListener("click", async function () {
      const emailInput = document.getElementById("reset-email");
      const emailError = document.getElementById("reset-email-error");
      const email = emailInput.value.trim();
      emailError.textContent = "";
      emailError.classList.add("d-none");
      emailInput.classList.remove("is-invalid");
      if (!email.includes("@gmail.com")) {
        emailError.textContent = "Invalid Gmail address! Please enter a valid @gmail.com email.";
        emailError.classList.remove("d-none");
        emailInput.classList.add("is-invalid");
        return;
      }
      let response = await fetch("/send-reset-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });
      let data = await response.json();
      if (data.message.includes("OTP sent")) {
        document.getElementById("step1").style.display = "none";
        document.getElementById("step2").style.display = "block";
      } else {
        emailError.textContent = data.message;
        emailError.classList.remove("d-none");
        emailInput.classList.add("is-invalid");
      }
    });
    
    // Verify OTP Button for Forgot Password (Step 2 -> Step 3)
    document.getElementById("verifyResetOTPBtn").addEventListener("click", async function () {
      const email = document.getElementById("reset-email").value.trim();
      const otp = document.getElementById("reset-otp").value.trim();
      const otpInput = document.getElementById("reset-otp");
      const otpError = document.getElementById("otpError");
      otpInput.classList.remove("is-invalid");
      otpError.classList.add("d-none");
      let response = await fetch("/verify-reset-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, otp }),
      });
      let data = await response.json();
      if (data.message.includes("OTP verified")) {
        document.getElementById("step2").style.display = "none";
        document.getElementById("step3").style.display = "block";
      } else {
        otpInput.classList.add("is-invalid");
        otpError.textContent = "Invalid OTP";
        otpError.classList.remove("d-none");
      }
    });
    
    // Resend OTP Link for Forgot Password
    document.getElementById("resendOTP").addEventListener("click", async function (e) {
      e.preventDefault();
      const resendLink = this;
      resendLink.classList.add("disabled");
      let countdown = 60;
      resendLink.textContent = `${countdown}s`;
      const interval = setInterval(() => {
        countdown--;
        resendLink.textContent = `${countdown}s`;
        if (countdown <= 0) {
          clearInterval(interval);
          resendLink.textContent = "Resend OTP";
          resendLink.classList.remove("disabled");
        }
      }, 1000);
      const email = document.getElementById("reset-email").value.trim();
      await fetch("/send-reset-otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });
    });
    
    // Reset Password Button (Step 3)
    document.getElementById("resetPasswordBtn").addEventListener("click", async function () {
      const newPasswordInput = document.getElementById("new-password");
      const confirmPasswordInput = document.getElementById("confirm-new-password");
      const newPasswordError = document.getElementById("new-password-error");
      const confirmPasswordError = document.getElementById("confirm-password-error");
      const passwordMismatchError = document.getElementById("password-mismatch-error");
      const successMessage = document.getElementById("password-reset-success");
      
      newPasswordError.classList.add("d-none");
      confirmPasswordError.classList.add("d-none");
      passwordMismatchError.classList.add("d-none");
      newPasswordInput.classList.remove("is-invalid");
      confirmPasswordInput.classList.remove("is-invalid");
      
      let valid = true;
      if (newPasswordInput.value.trim() === "") {
        newPasswordInput.classList.add("is-invalid");
        newPasswordError.textContent = "Please fill out this field.";
        newPasswordError.classList.remove("d-none");
        valid = false;
      }
      if (confirmPasswordInput.value.trim() === "") {
        confirmPasswordInput.classList.add("is-invalid");
        confirmPasswordError.classList.remove("d-none");
        valid = false;
      }
      if (newPasswordInput.value !== confirmPasswordInput.value) {
        passwordMismatchError.classList.remove("d-none");
        confirmPasswordInput.classList.add("is-invalid");
        valid = false;
      }
      const password = newPasswordInput.value;
      const lengthCriteria2 = password.length >= 8;
      const uppercaseCriteria2 = /[A-Z]/.test(password);
      const lowercaseCriteria2 = /[a-z]/.test(password);
      const numberCriteria2 = /[0-9]/.test(password);
      const specialCharCriteria2 = /[!@#$%^&*]/.test(password);
      if (!(lengthCriteria2 && uppercaseCriteria2 && lowercaseCriteria2 && numberCriteria2 && specialCharCriteria2)) {
        newPasswordInput.classList.add("is-invalid");
        newPasswordError.textContent = "Password does not meet security requirements.";
        newPasswordError.classList.remove("d-none");
        valid = false;
      }
      if (!valid) return;
      
      const email = document.getElementById("reset-email").value.trim();
      try {
        const response = await fetch("/reset-password", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, newPassword: password })
        });
        const data = await response.json();
        if (response.ok) {
          successMessage.classList.remove("d-none");
          setTimeout(() => {
            bootstrap.Modal.getInstance(document.getElementById("forgotPasswordModal")).hide();
            new bootstrap.Modal(document.getElementById("loginModal"), { backdrop: "static", keyboard: false }).show();
          }, 800);
        } else {
          alert(data.message);
        }
      } catch (error) {
        console.error("Error resetting password:", error);
        alert("An error occurred while resetting your password.");
      }
    });
    
    var forgotPasswordModalEl = document.getElementById("forgotPasswordModal");
    forgotPasswordModalEl.addEventListener("hidden.bs.modal", function () {
      document.getElementById("step1").style.display = "block";
      document.getElementById("step2").style.display = "none";
      document.getElementById("step3").style.display = "none";
      document.getElementById("reset-email").value = "";
      document.getElementById("reset-otp").value = "";
      document.getElementById("new-password").value = "";
      document.getElementById("confirm-new-password").value = "";
    });
    
    var registerModalEl = document.getElementById("registerModal");
    registerModalEl.addEventListener("hidden.bs.modal", function () {
      document.getElementById("registerForm").reset();
      document.querySelectorAll("#registerForm .is-invalid").forEach(function(el) {
        el.classList.remove("is-invalid");
      });
      document.getElementById("registerSuccess").classList.add("d-none");
      document.getElementById("criteria-length").classList.remove("text-success");
      document.getElementById("criteria-length").classList.add("text-danger");
      document.getElementById("criteria-uppercase").classList.remove("text-success");
      document.getElementById("criteria-uppercase").classList.add("text-danger");
      document.getElementById("criteria-lowercase").classList.remove("text-success");
      document.getElementById("criteria-lowercase").classList.add("text-danger");
      document.getElementById("criteria-number").classList.remove("text-success");
      document.getElementById("criteria-number").classList.add("text-danger");
      document.getElementById("criteria-symbol").classList.remove("text-success");
      document.getElementById("criteria-symbol").classList.add("text-danger");
      document.getElementById("reg-step1").style.display = "block";
      document.getElementById("reg-step2").style.display = "none";
    });
    
    document.addEventListener("DOMContentLoaded", function () {
      var registerModalEl = document.getElementById("registerModal");
      registerModalEl.addEventListener("hidden.bs.modal", function () {
        var registerForm = document.getElementById("registerForm");
        if (registerForm) {
          registerForm.reset();
        }
        registerForm.querySelectorAll(".is-invalid").forEach(function (el) {
          el.classList.remove("is-invalid");
        });
        var registerSuccess = document.getElementById("registerSuccess");
        if (registerSuccess) {
          registerSuccess.classList.add("d-none");
        }
        var criteriaIDs = [
          "criteria-length",
          "criteria-uppercase",
          "criteria-lowercase",
          "criteria-number",
          "criteria-symbol"
        ];
        criteriaIDs.forEach(function (id) {
          var el = document.getElementById(id);
          if (el) {
            el.classList.remove("text-success");
            el.classList.add("text-danger");
          }
        });
        var step1 = document.getElementById("reg-step1");
        var step2 = document.getElementById("reg-step2");
        if (step1 && step2) {
          step1.style.display = "block";
          step2.style.display = "none";
        }
      });
    });
    
    // Real-time password validation for Reset Password (Forgot Password Modal)
    document.getElementById("new-password").addEventListener("input", function () {
      const password = this.value;
      const lengthCriteria = password.length >= 8;
      const uppercaseCriteria = /[A-Z]/.test(password);
      const lowercaseCriteria = /[a-z]/.test(password);
      const numberCriteria = /[0-9]/.test(password);
      const specialCharCriteria = /[!@#$%^&*]/.test(password);
      document.getElementById("reset-criteria-length").classList.toggle("text-success", lengthCriteria);
      document.getElementById("reset-criteria-length").classList.toggle("text-danger", !lengthCriteria);
      document.getElementById("reset-criteria-uppercase").classList.toggle("text-success", uppercaseCriteria);
      document.getElementById("reset-criteria-uppercase").classList.toggle("text-danger", !uppercaseCriteria);
      document.getElementById("reset-criteria-lowercase").classList.toggle("text-success", lowercaseCriteria);
      document.getElementById("reset-criteria-lowercase").classList.toggle("text-danger", !lowercaseCriteria);
      document.getElementById("reset-criteria-number").classList.toggle("text-success", numberCriteria);
      document.getElementById("reset-criteria-number").classList.toggle("text-danger", !numberCriteria);
      document.getElementById("reset-criteria-symbol").classList.toggle("text-success", specialCharCriteria);
      document.getElementById("reset-criteria-symbol").classList.toggle("text-danger", !specialCharCriteria);
    });
    
    // Password match validation
    document.getElementById("confirm-new-password").addEventListener("input", function () {
      const newPassword = document.getElementById("new-password").value;
      const confirmPassword = this.value;
      const mismatchError = document.getElementById("password-mismatch-error");
      if (confirmPassword !== newPassword) {
        mismatchError.classList.remove("d-none");
      } else {
        mismatchError.classList.add("d-none");
      }
    });
    document.querySelector(".toggle-password-reset").addEventListener("click", function () {
    const pwd = document.getElementById("new-password");
    const icon = this.querySelector("i");
    if (pwd.type === "password") {
      pwd.type = "text";
      icon.classList.replace("bi-eye-slash", "bi-eye");
    } else {
      pwd.type = "password";
      icon.classList.replace("bi-eye", "bi-eye-slash");
    }
  });

  document.querySelector(".toggle-password-reset-confirm").addEventListener("click", function () {
    const pwd = document.getElementById("confirm-new-password");
    const icon = this.querySelector("i");
    if (pwd.type === "password") {
      pwd.type = "text";
      icon.classList.replace("bi-eye-slash", "bi-eye");
    } else {
      pwd.type = "password";
      icon.classList.replace("bi-eye", "bi-eye-slash");
    }
  });
  </script>
</body>
</html>
