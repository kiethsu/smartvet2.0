<%
// (Any server‐side EJS helpers you already have—unchanged)
%>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Profile Details</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Google Fonts: Roboto -->
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <!-- SweetAlert2 -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.min.css" />

  <style>
    :root {
      --primary: #1E88E5;
      --primary-dark: #0D47A1;
      --accent: #90CAF9;
      --white: #ffffff;
      --text: #333;
      --secondary-color: #264653;
      --background-color: #f4f7fa;
      --card-bg: #ffffff;
      --border-color: #eaeaea;
    }
    * { box-sizing: border-box; }

    html, body {
      background-color: var(--background-color);
      color: var(--text);
      margin: 0; padding: 0;
      font-family: 'Roboto', Arial, sans-serif;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
      height: auto !important;
    }

    .page-wrapper {
      min-height: 100vh;
      padding-bottom: 32px;
      display: flex;
      flex-direction: column;
    }

    .card {
      border: 1px solid var(--border-color);
      border-radius: 16px;
      background: var(--card-bg);
      box-shadow:
        0 4px 24px rgba(30,136,229,0.12),
        0 1.5px 12px rgba(32,39,55,0.08);
      position: relative;
    }

    /* Profile overview styled to match select-pets-card size/feel */
    .profile-overview {
      border: none;
      border-radius: 16px;
      background: var(--card-bg);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      min-width: 0;
      padding: 0;
      box-shadow:
        0 4px 24px rgba(30,136,229,0.12),
        0 1.5px 12px rgba(32,39,55,0.08);
      min-height: 680px;
    }
    .profile-overview .top-section {
      padding: 28px 24px 12px;
      display: flex;
      flex-direction: column;
      align-items: center;
      position: relative;
      text-align: center;
    }

    .profile-img-container {
      position: relative;
      width: 150px;
      height: 150px;
      border-radius: 50%;
      overflow: hidden;
      border: 3px solid var(--primary);
      background-color: #e9ecef;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 8px;
      flex-shrink: 0;
    }
    .profile-img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .profile-info {
      margin-top: 8px;
      width: 100%;
    }
    .profile-info h4 {
      margin-bottom: 4px;
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--primary-dark);
    }
    .profile-info .subtext {
      font-size: 0.85rem;
      color: #555;
    }

    .section-divider {
      height: 1px;
      background: rgba(0,0,0,0.07);
      margin: 8px 16px;
      border-radius: 1px;
    }

    /* Enhanced contact card */
    .contact-card {
      background: #fff;
      border-radius: 12px;
      margin: 12px 16px;
      padding: 12px;
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 12px;
      border: 1px solid rgba(0,0,0,0.04);
    }
    .contact-row.enhanced {
      display: flex;
      align-items: center;
      gap: 14px;
      padding: 10px 14px;
      background: #f1f5fa;
      border-radius: 10px;
      position: relative;
      overflow: hidden;
    }
    .icon-wrapper {
      flex: 0 0 44px;
      width: 44px;
      height: 44px;
      border-radius: 50%;
      background: rgba(30,136,229,0.1);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .icon-wrapper i {
      font-size: 18px;
      color: var(--primary);
    }
    .info {
      display: flex;
      flex-direction: column;
      flex: 1;
      min-width: 0;
    }
    .label {
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1px;
      color: #555;
      margin-bottom: 2px;
    }
    .value {
      font-size: 1.05rem;
      font-weight: 500;
      color: #1f2d45;
      word-break: break-word;
    }
    .value.muted {
      color: #6c757d;
      font-style: italic;
    }

    .footer-hint {
      padding: 10px 16px;
      font-size: 0.65rem;
      color: #6c757d;
      text-align: center;
      background: rgba(0,0,0,0.03);
      border-top: 1px solid rgba(0,0,0,0.05);
    }

    /* Tab header inside card */
    .profile-tabs {
      display: flex;
      gap: 8px;
      padding: 0;
      margin: 0;
      list-style: none;
      border-bottom: 1px solid rgba(0,0,0,0.08);
      background: #f1f5fa;
      border-radius: 12px 12px 0 0;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none;
    }
    .profile-tabs::-webkit-scrollbar { display: none; }

    .profile-tab-item {
      flex-shrink: 0;
    }
    .profile-tab-item button {
      background: transparent;
      border: none;
      padding: 12px 18px;
      font-weight: 600;
      cursor: pointer;
      position: relative;
      border-radius: 8px 8px 0 0;
      font-size: 0.95rem;
      color: #444;
      transition: background .2s ease, color .2s ease, box-shadow .2s ease;
      outline: none;
      line-height: 1;
    }
    .profile-tab-item button:hover,
    .profile-tab-item button:focus {
      background: transparent;
      color: var(--primary-dark);
    }
    .profile-tab-item.active button {
      background: var(--primary);
      color: #fff;
    }
    .profile-tab-item.active button::after {
      content: "";
      position: absolute;
      inset: 0;
      box-shadow: 0 6px 20px rgba(30,136,229,0.25);
      border-radius: 8px 8px 0 0;
      pointer-events: none;
    }

    .form-section {
      border-radius: 16px;
      margin-bottom: 0;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      flex: 1 1 0;
      min-height: 0;
    }
    .form-body {
      padding: 24px;
      display: flex;
      flex-direction: column;
      flex: 1 1 auto;
      min-height: 0;
    }
    .form-control {
      border-radius: 5px;
      border: 1px solid #ced4da;
      box-shadow: none;
    }
    .form-control:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 0.2rem rgba(30,136,229,0.25);
    }
    label {
      font-weight: 500;
      color: var(--secondary-color);
    }
    button.btn {
      border-radius: 5px;
      font-weight: 600;
    }

    .container-fluid {
      padding-right: 16px;
      width: 100%;
    }
    .content-wrapper {
      display: flex;
      flex-wrap: nowrap;
      gap: 16px;
      align-items: flex-start;
      width: 100%;
      margin-top: 8px;
    }
    .left {
      flex: 1 1 100%;
      max-width: 560px;
      padding-left: 12px;
      min-width: 0;
    }
    .right {
      flex: 1 1 0;
      padding-right: 12px;
    }
    .profile-content {
      display: flex;
      flex-direction: column;
      min-width: 0;
      flex: 1 1 auto;
      min-height: 0;
    }

    .requirement-passed { color: green; }
    .requirement-failed { color: #444; }
    .small-checklist { margin-top:6px; padding-left:18px; font-size:0.85rem; list-style: none; }

    @media (max-width: 991.98px) {
      .content-wrapper {
        flex-wrap: wrap;
      }
      .left, .right {
        flex: 1 1 100%;
        max-width: 100%;
        padding-left: 0;
        padding-right: 0;
        position: relative;
      }
      .profile-overview, .form-section {
        margin-bottom: 16px;
      }
      .container-fluid {
        padding: 0 8px;
      }
      .profile-content {
        max-height: calc(100vh - 180px);
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        padding-right: 4px;
      }
    }
  </style>
</head>

<body>
  <div class="page-wrapper">
    <div class="container-fluid p-0">
      <div class="content-wrapper">
        <div class="left">
          <div class="profile-overview card">
            <div class="top-section">
              <div class="profile-img-container mb-2" id="profileImgContainer">
                <% if (user.profilePic) { %>
                  <img src="<%= user.profilePic %>" alt="Profile Picture" class="profile-img" id="profilePreview">
                <% } else { %>
                  <div class="d-flex align-items-center justify-content-center h-100" id="profilePreview">
                    <i class="fas fa-user fa-3x"></i>
                  </div>
                <% } %>
                <input type="file" id="profileImageInput" style="display: none;" accept="image/*">
              </div>
              <div class="mb-2">
                <button type="button" class="btn btn-outline-primary btn-sm" id="uploadImageButton">
                  <i class="fas fa-upload me-1"></i> Upload Image
                </button>
              </div>
              <div class="profile-info">
                <h4><%= user.username %></h4>
                <div class="subtext">Profile overview</div>
              </div>
            </div>
            <div class="section-divider"></div>
            <div class="contact-card">
              <div class="contact-row enhanced">
                <div class="icon-wrapper">
                  <i class="fas fa-envelope"></i>
                </div>
                <div class="info">
                  <div class="label">Email</div>
                  <div class="value <%= user.email ? '' : 'muted' %>">
                    <%= user.email || 'No email provided' %>
                  </div>
                </div>
              </div>
              <div class="contact-row enhanced">
                <div class="icon-wrapper">
                  <i class="fas fa-map-marker-alt"></i>
                </div>
                <div class="info">
                  <div class="label">Location</div>
                  <div class="value <%= user.address ? '' : 'muted' %>">
                    <%= user.address || 'No address provided' %>
                  </div>
                </div>
              </div>
              <div class="contact-row enhanced">
                <div class="icon-wrapper">
                  <i class="fas fa-phone"></i>
                </div>
                <div class="info">
                  <div class="label">Phone</div>
                  <div class="value <%= user.cellphone ? '' : 'muted' %>">
                    <%= user.cellphone || 'No cellphone number provided' %>
                  </div>
                </div>
              </div>
            </div>
            <div class="footer-hint">
              Profile picture & info are editable via the form.
            </div>
          </div>
        </div>
        <div class="right">
          <div class="card form-section">
            <!-- tabs as header -->
            <ul class="profile-tabs mb-0">
              <li class="profile-tab-item active" data-target="profile-details">
                <button type="button">Profile Details</button>
              </li>
              <li class="profile-tab-item" data-target="update-email">
                <button type="button">Update Email</button>
              </li>
              <li class="profile-tab-item" data-target="update-password">
                <button type="button">Update Password</button>
              </li>
            </ul>
            <div class="form-body">
              <div class="profile-content">
                <div class="tab-content" id="profileTabContent">
                  <div class="tab-pane fade show active" id="profile-details" role="tabpanel">
                    <form id="profileDetailsForm">
                      <div class="form-group">
                        <label for="fullName">Username/Full Name</label>
                        <input type="text" class="form-control" id="fullName" value="<%= user.username %>">
                      </div>
                      <div class="form-group">
                        <label for="address">Address</label>
                        <input type="text" class="form-control" id="address" value="<%= user.address || '' %>">
                      </div>
                      <div class="form-group">
                        <label for="cellphone">Cellphone No(s)</label>
                        <input type="text" class="form-control" id="cellphone" value="<%= user.cellphone || '' %>">
                      </div>
                      <button type="submit" class="btn btn-primary btn-block">
                        Update Profile
                      </button>
                    </form>
                  </div>
                  <div class="tab-pane fade" id="update-email" role="tabpanel">
                    <form id="emailUpdateForm">
                      <div class="form-group">
                        <label for="currentEmail">Current Email</label>
                        <input type="email" class="form-control" id="currentEmail"
                               value="<%= user.email %>" readonly>
                      </div>
                      <div class="form-group">
                        <label for="newEmail">New Email</label>
                        <div class="input-group">
                          <input type="email" class="form-control" id="newEmail" placeholder="Enter new email">
                          <div class="input-group-append">
                            <button type="button" class="btn btn-primary" id="sendEmailOTP">Send OTP</button>
                          </div>
                        </div>
                      </div>
                      <div class="form-group">
                        <label for="emailOTP">Verify OTP</label>
                        <input type="text" class="form-control" id="emailOTP" placeholder="Enter OTP">
                      </div>
                      <button type="submit" class="btn btn-primary btn-block">
                        Update Email
                      </button>
                    </form>
                  </div>
                  <div class="tab-pane fade" id="update-password" role="tabpanel">
                    <form id="passwordUpdateForm" novalidate>
                      <div class="form-group">
                        <label for="newPassword">New Password</label>
                        <div class="input-group">
                          <input type="password" class="form-control" id="newPassword" placeholder="Enter new password" aria-describedby="passwordHelp">
                          <div class="input-group-append">
                            <span class="input-group-text toggle-password" style="cursor: pointer;">
                              <i class="fas fa-eye"></i>
                            </span>
                          </div>
                        </div>
                        <small id="passwordHelp" class="form-text text-muted">
                          Password must satisfy all of the following:
                        </small>
                        <ul id="password-requirements" class="small-checklist">
                          <li data-rule="length" class="requirement-failed" style="display:flex; gap:6px;">
                            <span class="requirement-icon">❌</span> At least 8 characters
                          </li>
                          <li data-rule="uppercase" class="requirement-failed" style="display:flex; gap:6px;">
                            <span class="requirement-icon">❌</span> One uppercase letter
                          </li>
                          <li data-rule="lowercase" class="requirement-failed" style="display:flex; gap:6px;">
                            <span class="requirement-icon">❌</span> One lowercase letter
                          </li>
                          <li data-rule="special" class="requirement-failed" style="display:flex; gap:6px;">
                            <span class="requirement-icon">❌</span> One special character (e.g., !@#$%^&*)
                          </li>
                        </ul>
                      </div>
                      <div class="form-group">
                        <label for="confirmPassword">Confirm New Password</label>
                        <div class="input-group">
                          <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm new password">
                          <div class="input-group-append">
                            <span class="input-group-text toggle-password" style="cursor: pointer;">
                              <i class="fas fa-eye"></i>
                            </span>
                          </div>
                        </div>
                        <div id="password-match-feedback" style="margin-top:4px; font-size:0.85rem;"></div>
                      </div>
                      <button type="submit" class="btn btn-primary btn-block">
                        Update Password
                      </button>
                    </form>
                  </div>
                </div> <!-- /.tab-content -->
              </div>
            </div>
          </div> <!-- /.card -->
        </div> <!-- /.right -->
      </div> <!-- /.content-wrapper -->
    </div> <!-- /.container-fluid -->
  </div> <!-- /.page-wrapper -->

  <!-- Dependencies -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>

  <script>
    // PATCH helper: update overview & form fields from returned user object
    function refreshProfileOverview(user) {
      $('.profile-info h4').text(user.username || '');

      const emailElem = $('.contact-card .contact-row').filter(function() {
        return $(this).find('i').hasClass('fa-envelope');
      }).find('.value');
      if (user.email) {
        emailElem.removeClass('muted').text(user.email);
      } else {
        emailElem.addClass('muted').text('No email provided');
      }

      const addrElem = $('.contact-card .contact-row').filter(function() {
        return $(this).find('i').hasClass('fa-map-marker-alt');
      }).find('.value');
      if (user.address) {
        addrElem.removeClass('muted').text(user.address);
      } else {
        addrElem.addClass('muted').text('No address provided');
      }

      const phoneElem = $('.contact-card .contact-row').filter(function() {
        return $(this).find('i').hasClass('fa-phone');
      }).find('.value');
      if (user.cellphone) {
        phoneElem.removeClass('muted').text(user.cellphone);
      } else {
        phoneElem.addClass('muted').text('No cellphone number provided');
      }

      $('#fullName').val(user.username || '');
      $('#address').val(user.address || '');
      $('#cellphone').val(user.cellphone || '');
      $('#currentEmail').val(user.email || '');
    }

    // Tab switching for card header
    $(document).on('click', '.profile-tab-item button', function() {
      const parent = $(this).closest('.profile-tab-item');
      const target = parent.data('target');

      $('.profile-tab-item').removeClass('active');
      parent.addClass('active');

      $('#profileTabContent .tab-pane').removeClass('show active');
      $('#' + target).addClass('show active');
    });

    // Toggle password visibility
    $(document).on('click', '.toggle-password', function(){
      const input = $(this).closest('.input-group').find('input');
      const icon  = $(this).find('i');
      if (input.attr('type') === 'password') {
        input.attr('type', 'text');
        icon.removeClass('fa-eye').addClass('fa-eye-slash');
      } else {
        input.attr('type', 'password');
        icon.removeClass('fa-eye-slash').addClass('fa-eye');
      }
    });

    // upload image
    $(document).on('click', '#uploadImageButton', function(e) {
      e.preventDefault();
      $('#profileImageInput').click();
    });

    $(document).on('change', '#profileImageInput', function(){
      const file = this.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = e => {
        $('#profileImgContainer').find('.profile-img, #profilePreview').remove();
        $('#profileImgContainer').prepend(`<img src="${e.target.result}" class="profile-img" id="profilePreviewImg">`);
      };
      reader.readAsDataURL(file);

      const formData = new FormData();
      formData.append('profilePic', file);
      $.ajax({
        url: '/customer/update-profile-image',
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false
      }).done(res => {
        Swal.fire(res.success ? 'Success' : 'Error', res.message || (res.success ? 'Profile image updated.' : 'Failed to update image.'), res.success ? 'success' : 'error');
        if (res.success) {
          $('#sidebarProfilePic').attr('src', res.profilePic + '?v=' + Date.now());
          if (res.user) {
            refreshProfileOverview(res.user);
              if (window.applyUserToShell) window.applyUserToShell({ profilePic: res.profilePic });
    $(document).trigger('user:updated', [{ profilePic: res.profilePic }]);
          }
        }
      }).fail(() => {
        Swal.fire('Error', 'Server error updating image.', 'error');
      });
    });

    // profile details submit
    $(document).on('submit', '#profileDetailsForm', function(e) {
      e.preventDefault();
      const fullName = $('#fullName').val().trim();
      if (!fullName) return Swal.fire('Error', 'Full name is required.', 'error');
      $.post('/customer/update-profile-details', {
        fullName,
        address: $('#address').val().trim(),
        cellphone: $('#cellphone').val().trim()
      })
      .done(res => {
        Swal.fire(res.success ? 'Success' : 'Error', res.message, res.success ? 'success' : 'error');
        if (res.success && res.user) {
          refreshProfileOverview(res.user);
              if (window.applyUserToShell) window.applyUserToShell(res.user);
    $(document).trigger('user:updated', [res.user]);
        }
      })
      .fail(xhr => {
        Swal.fire('Error', xhr.responseJSON?.message || 'Server error.', 'error');
      });
    });

    // email OTP & update flows
    $(document).on('click', '#sendEmailOTP', function() {
      const newEmail = $('#newEmail').val().trim();
      if (!newEmail) return Swal.fire('Error', 'Enter a new email.', 'error');
      $.post('/customer/send-email-otp', { newEmail })
        .done(res => Swal.fire(res.success ? 'Success' : 'Error', res.message, res.success ? 'success' : 'error'))
        .fail(xhr => Swal.fire('Error', xhr.responseJSON?.message || 'Server error.', 'error'));
    });

    $(document).on('submit', '#emailUpdateForm', function(e) {
      e.preventDefault();
      const newEmail = $('#newEmail').val().trim();
      const emailOTP = $('#emailOTP').val().trim();
      if (!newEmail || !emailOTP) return Swal.fire('Error', 'Email & OTP required.', 'error');
      $.post('/customer/update-email', { newEmail, emailOTP })
        .done(res => {
          Swal.fire(res.success ? 'Success' : 'Error', res.message, res.success ? 'success' : 'error');
          if (res.success && res.user) {
            refreshProfileOverview(res.user);
            $('#newEmail').val('');
            $('#emailOTP').val('');
          }
        })
        .fail(xhr => Swal.fire('Error', xhr.responseJSON?.message || 'Server error.', 'error'));
    });

    // password validation logic
    const rules = {
      length: /.{8,}/,
      uppercase: /[A-Z]/,
      lowercase: /[a-z]/,
      special: /[^A-Za-z0-9]/
    };

    function updateRequirementUI(password) {
      Object.entries(rules).forEach(([ruleName, regex]) => {
        const passed = regex.test(password);
        const li = $(`#password-requirements li[data-rule="${ruleName}"]`);
        const icon = li.find('.requirement-icon');
        if (passed) {
          icon.text('✅');
          li.removeClass('requirement-failed').addClass('requirement-passed');
        } else {
          icon.text('❌');
          li.removeClass('requirement-passed').addClass('requirement-failed');
        }
      });
    }

    function checkPasswordMatch() {
      const pw = $('#newPassword').val();
      const cpw = $('#confirmPassword').val();
      const feedback = $('#password-match-feedback');
      if (!cpw) {
        feedback.text('');
        return false;
      }
      if (pw === cpw) {
        feedback.text('Passwords match.').css('color', 'green');
        return true;
      } else {
        feedback.text('Passwords do not match.').css('color', 'red');
        return false;
      }
    }

    function passwordMeetsAllRules(pw) {
      return Object.values(rules).every(r => r.test(pw));
    }

    $(document).on('input', '#newPassword', function() {
      const pw = $(this).val();
      updateRequirementUI(pw);
      checkPasswordMatch();
    });
    $(document).on('input', '#confirmPassword', checkPasswordMatch);

    $(document).on('submit', '#passwordUpdateForm', function(e) {
      e.preventDefault();
      const pw  = $('#newPassword').val().trim();
      const cpw = $('#confirmPassword').val().trim();

      if (!pw || !cpw) {
        return Swal.fire('Error', 'Both password fields are required.', 'error');
      }
      if (!passwordMeetsAllRules(pw)) {
        return Swal.fire(
          'Error',
          'Password must be at least 8 characters and include one uppercase letter, one lowercase letter, and one special character.',
          'error'
        );
      }
      if (pw !== cpw) {
        return Swal.fire('Error', 'Passwords do not match.', 'error');
      }

      $.post('/customer/update-password', { newPassword: pw })
        .done(res => {
          Swal.fire(res.success ? 'Success' : 'Error', res.message, res.success ? 'success' : 'error');
          if (res.success) {
            $('#newPassword').val('');
            $('#confirmPassword').val('');
            updateRequirementUI('');
            $('#password-match-feedback').text('');
          }
        })
        .fail(xhr => Swal.fire('Error', xhr.responseJSON?.message || 'Server error.', 'error'));
    });
  </script>
</body>
</html>
