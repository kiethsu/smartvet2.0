<%
  // ===== Unified helpers (server-side) =====
  // Default petDetails
  var petDetails = typeof petDetails !== 'undefined'
    ? petDetails
    : { species: [], speciesBreeds: {}, diseases: [], services: [] };

  function pad2(n){ n = parseInt(n,10); if (isNaN(n)) n = 0; return (n<10?'0':'')+n; }

  // Always return local YYYY-MM-DD (used for data-date)
  function formatLocalDate(dateStr){
    if(!dateStr) return '';
    var d = new Date(dateStr);
    if(isNaN(d)) return '';
    var yyyy = d.getFullYear();
    var mm = pad2(d.getMonth()+1);
    var dd = pad2(d.getDate());
    return yyyy + '-' + mm + '-' + dd;
  }

  // Safe date for sorting
  function safeDateValue(d){
    var x = new Date(d);
    return isNaN(x) ? new Date(0) : x;
  }

  // Normalize any time to "HH:MM" 24h (defaults to 00:00)
  function safeTimeHHmm(timeStr){
    if(!timeStr || typeof timeStr!=='string') return '00:00';
    var m = timeStr.trim().match(/^(\d{1,2}):?(\d{2})?\s*([AaPp][Mm])?$/);
    if(!m) return '00:00';
    var h = parseInt(m[1],10) || 0;
    var min = parseInt(m[2]||'0',10) || 0;
    var suf = (m[3]||'').toUpperCase();
    if(suf==='PM' && h<12) h+=12;
    if(suf==='AM' && h===12) h=0;
    if(h<0||h>23) h=0;
    if(min<0||min>59) min=0;
    return pad2(h)+':'+pad2(min);
  }

  // Display "h:mm AM/PM" (— if missing)
  function formatTime(timeStr){
    var hhmm = safeTimeHHmm(timeStr);
    var parts = hhmm.split(':');
    var h = parseInt(parts[0],10);
    var m = parts[1];
    if (isNaN(h)) return '—';
    var suffix = h<12 ? 'AM':'PM';
    var h12 = h%12===0 ? 12 : h%12;
    return h12 + ':' + m + ' ' + suffix;
  }

  // Choose a reservation's logical date (schema may not have .date)
  function resolveDate(res){
    if(!res) return null;
    return res.date || (res.schedule && res.schedule.scheduleDate) || res.createdAt;
  }

  // ===== Build & sort lists =====
  var pendingReservations = (reservations||[])
    .filter(function(r){ return r && r.status === 'Pending'; })
    .sort(function(a,b){
      var d1 = safeDateValue(resolveDate(a)), d2 = safeDateValue(resolveDate(b));
      if (d1.getTime() !== d2.getTime()) return d1 - d2;
      var t1 = safeTimeHHmm(a && a.time), t2 = safeTimeHHmm(b && b.time);
      return t1.localeCompare(t2);
    });

  var historyReservations = (reservations||[]).filter(function(r){
    return r && ['Done','Not Attended','Paid'].includes(r.status);
  });

  var ongoingReservations = (reservations||[]).filter(function(r){
    return r && (
      r.status === 'Paid' ||
      r.status === 'Done' ||
      !!r.doctor
    ) && !r.isInitialEntry && !r.isStacked;
  });
%>


<div class="container-fluid reservation-container">
<style>
  /* Reservation Content Styles */
  .reservation-container {
    background-color: #f7f7f7;
    min-height: 100vh;
    padding: 2rem;
  }
  .card {
    background: #fff;
    border: none;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
    overflow: visible;
  }
  .table th,
  .table td {
    vertical-align: middle;
    padding: 0.75rem;
  }
  .btn-link {
    font-weight: 500;
    color: #2a9d8f;
    font-size: 14px;
  }
  .btn-link:hover {
    text-decoration: none;
    color: #237c67;
  }
  /* Fixed height container for tables */
  .fixed-table-container {
    height: 300px; /* adjust as needed */
    overflow-y: auto;
  }
  /* Approved Reservations styling */
  .approved-table-wrapper {
    max-height: 500px;
    overflow-y: auto;
    overflow-x: visible;
  }
  .approved-reservations .table-responsive table {
    width: 100%;
    table-layout: fixed;
  }
  /* Equal-width columns for Owner/Details/Actions */
  .approved-reservations .table-responsive table thead th {
    width: 33.33%;
    text-align: center;
  }
  .approved-reservations .table-responsive table thead th:first-child {
    text-align: left;
  }
  .approved-reservations th,
  .approved-reservations td {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  /* Medication column */
  .medication-column {
    min-width: 140px;
    text-align: center;
  }
  /* Datepicker highlighting */
  .has-appointment a {
    background-color: #2a9d8f !important;
    color: #fff !important;
  }
  .no-appointment a {
    background-color: #d9534f !important;
    color: #fff !important;
  }
  /* Dropdown on top */
  .dropdown-menu {
    z-index: 2000;
  }
  /* Navigation tab styling */
  .tab-link {
    cursor: pointer;
    padding: 5px 10px;
    text-decoration: none;
    color: #2a9d8f;
    font-size: 14px;
  }
  .tab-link.active {
    font-weight: bold;
    border-bottom: 2px solid #2a9d8f;
  }
  /* Header buttons in left column */
  .header-buttons {
    font-size: 14px;
  }
  .header-buttons button {
    margin-right: 5px;
  }
  /* Search box styling */
  .search-box {
    width: 430px;
    margin-left: 0;
    height: 30px;
  }
  /* Equal button class for consistent sizing */
  .equal-btn {
    width: 120px;
  }
  /* Center the Assign-Doctor (and other action) buttons */
  .actions-column {
    text-align: center;
  }
  /* Charcoal header, white text */
#receiptTable thead,
#servicesTable thead {
  background-color: #343a40;  /* charcoal */
  color: #ffffff;
}

/* Light gray footer rows */
#receiptTable tfoot tr,
#servicesTable tfoot tr {
  background-color: #f1f1f1;
  color: #212529;
  font-weight: 600;
}

/* Teal accents for totals */
#medTotal,
#svcTotal,
#grandTotal {
  color: #20c997;
}

/* Subtle hover and stripe */
#receiptTable tbody tr:hover,
#servicesTable tbody tr:hover {
  background-color: #e9ecef;
}
#receiptTable.table-striped tbody tr:nth-of-type(odd),
#servicesTable.table-sm tbody tr:nth-of-type(odd) {
  background-color: #fafafa;
}

/* Button accent */
#btnMarkPaid {
  background-color: #20c997;
  border-color: #17a589;
}
#btnMarkPaid:hover {
  background-color: #17a589;
}

/* Remove-button styling */
.btn-remove {
  color: #dc3545;
}
.btn-remove:hover {
  color: #bd2130;
}
/* make the receipt modal-body scrollable */
#medicationModal .modal-body {
  max-height: 70vh;
  overflow-y: auto;
  padding-right: 1rem; /* prevent scrollbar overlap */
}
/* ---------- make all category‐tables line up ---------- */
/* give each column a fixed percentage width that’s the same in every table */
#medicationsByCategory .table th:nth-child(1) { width: 40%; } /* product name */
#medicationsByCategory .table th:nth-child(2) { width: 15%; } /* qty */
#medicationsByCategory .table th:nth-child(3) { width: 15%; } /* unit price */
#medicationsByCategory .table th:nth-child(4) { width: 20%; } /* line total */
#medicationsByCategory .table th:nth-child(5) { width: 10%; } /* edit */

/* allow horizontal scrolling if a product name is very long */
#medicationsByCategory .table-responsive {
  overflow-x: auto;
  margin-bottom: 0.5rem;
}
.med-total-footer {
  background-color: #f1f1f1;   /* same as your table tfoot */
  color:           #212529;   /* same as your table tfoot */
  font-weight:     600;        /* bold like your tfoot */
  padding:         0.75rem;    /* match the cell padding */
  margin-top:      0.5rem;     /* give a little breathing room */
  width:           100%;       /* full-width to align under tables */
}
.med-total-footer span#medTotal {
  color: #20c997;              /* keep your teal accent for the number */
}
/* HR consult view uses same look as customer */
.view-details-header{
  background:#f1f5fa;padding:12px 18px;font-weight:600;font-size:.95rem;color:#444;
  border-bottom:1px solid rgba(0,0,0,.08);border-radius:12px 12px 0 0;
}
.details-table{width:100%;border-collapse:collapse;margin-bottom:1rem}
.details-table th,.details-table td{padding:.75rem 1.25rem;border:1px solid #eaeaea;vertical-align:top;text-align:left}
.details-table th{background:#f1f5fa;color:#264653;font-weight:600;width:30%}
/* ===== Make HR View Details modal match consult.ejs ===== */
#hrConsultViewModal.modal { z-index: 3000 !important; }
.modal-backdrop { z-index: 2499 !important; }
/* FIX: keep these modals above the custom backdrop */
#medicationModal.modal,
#editMedModal.modal {
  z-index: 3001 !important;
}

.swal2-container { z-index: 5001 !important; }  /* keep SweetAlert on top */
.swal2-popup { z-index: 5002 !important; }

#hrConsultViewModal .modal-dialog {
  max-width: 600px;
  width: 100%;
}

#hrConsultViewModal .modal-content {
  border: none;
  border-radius: 12px;
  box-shadow: 0 8px 20px rgba(0,0,0,0.1);
  max-height: 90vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;           /* rounds bottom corners + clips footer */
}

/* header already exists in your file; keeping here for parity */
#hrConsultViewModal .view-details-header{
  background:#f1f5fa;
  padding:12px 18px;
  font-weight:600;
  font-size:.95rem;
  color:#444;
  border-bottom:1px solid rgba(0,0,0,.08);
  border-radius:12px 12px 0 0;
}

#hrConsultViewModal .modal-body {
  flex: 1 1 auto !important;
  overflow-y: auto !important;
  padding: 1rem 1.5rem !important;
}

/* footer strip + centered Close button (same as consult.ejs) */
#hrConsultViewModal .footer-hint {
  margin-top: auto;
  padding: 8px 16px;
  font-size: 0.65rem;
  color: #6c757d;
  text-align: center;
  background: rgba(0,0,0,0.03);
  border-top: 1px solid rgba(0,0,0,0.05);
  border-radius: 0 0 12px 12px;
  width: 100%;
  box-sizing: border-box;
}
#hrConsultViewModal .footer-hint .btn {
  min-width: 120px;
  margin-top: 6px;
}

/* table look (same as consult.ejs) */
#hrConsultViewModal .details-table{
  width:100%;
  border-collapse:collapse;
  margin-bottom:1rem
}
#hrConsultViewModal .details-table th,
#hrConsultViewModal .details-table td{
  padding:.75rem 1.25rem;
  border:1px solid #eaeaea;
  vertical-align:top;
  text-align:left
}
#hrConsultViewModal .details-table th{
  background:#f1f5fa;
  color:#264653;
  font-weight:600;
  width:30%
}

</style>

   <!-- Optional debug output -->
  <div id="doctorsDebug" style="display:none;"><%= JSON.stringify(doctors) %></div>
  
  <!-- Content Header -->
  <div class="content-header mb-4">
    <h3 class="font-weight-bold text-dark" style="font-size: 18px;">Appointments</h3>
  </div>
  
  <div class="row">
    <!-- Left Column: Pending Appointments & History -->
    <div class="col-lg-6">
      <!-- Pending Appointments Card -->
      <div class="card p-4 shadow-sm mb-4">
        <!-- Header: Buttons & Search -->
        <div class="d-flex justify-content-between align-items-center header-buttons mb-3">
          <div>
            <button class="btn btn-link" id="btnToday">Today</button>
            <button class="btn btn-link" id="btnSelectDate">Select Date</button>
            <button class="btn btn-success btn-sm" id="toggleHistory">History</button>
          </div>
          <input type="text" class="form-control form-control-sm search-box" id="searchInput" placeholder="Search">
        </div>
        <!-- Hidden datepicker container -->
        <div id="datepickerContainer" class="mb-3" style="display: none;">
          <input type="text" id="datepicker" class="form-control">
        </div>
        
        <!-- Pending Appointments Table -->
        <div class="table-responsive fixed-table-container">
          <table class="table table-hover mb-0">
            <thead>
              <tr>
                <th>Owner Name</th>
                <th>Time</th>    
                <th>Service</th>
                <th class="text-center">Details</th>
                <th class="text-center">Action</th>
              </tr>
            </thead>
            <tbody id="appointmentsTableBody">
              <% pendingReservations.forEach(function(reservation) { %>
                <% const rowDateP = resolveDate(reservation); %>
                <tr id="reservation-<%= reservation._id %>"
                    data-date="<%= formatLocalDate(rowDateP) %>"
                    data-time="<%= safeTimeHHmm(reservation.time) %>">
                  <td class="ownerName"><%= reservation.ownerName %></td>
                  <td><%= formatTime(reservation.time) %></td>
                  <td><%= reservation.service %></td>
                  <td class="text-center">
                    <button class="btn btn-info btn-sm equal-btn mx-auto d-block"
                            onclick="viewReservation('<%= reservation._id %>','pending')">
                      View
                    </button>
                  </td>
                  <td class="text-center">
                    <button class="btn btn-success btn-sm equal-btn mx-auto d-block"
                            onclick="approveReservation('<%= reservation._id %>')">
                      Approve
                    </button>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Reservation History Card -->
      <div class="card p-4 shadow-sm mb-4" id="historySection" style="display: none;">
        <h4 class="font-weight-bold mb-3" style="font-size: 16px;">Reservation History</h4>
        <div class="table-responsive fixed-table-container">
          <table class="table table-hover mb-0">
            <thead>
              <tr>
                <th>Owner Name</th>
                <th>Time</th>
                <th>Service</th>
                <th>Status</th>
                <th class="text-center">Details</th>
              </tr>
            </thead>
            <tbody>
              <% if (historyReservations.length > 0) { %>
                <% historyReservations.forEach(function(reservation) { %>
                  <% const rowDateH = resolveDate(reservation); %>
                  <tr data-date="<%= formatLocalDate(rowDateH) %>">
                    <td><%= reservation.ownerName %></td>
                    <td><%= formatTime(reservation.time) %></td>
                    <td><%= reservation.service %></td>
                    <td class="text-center">
                      <span class="badge badge-<%= reservation.status === 'Not Attended' ? 'danger' : 'success' %>">
                        <%= reservation.status === 'Not Attended' ? 'Not Attended' : 'Done' %>
                      </span>
                    </td>
                    <td class="text-center">
                      <button class="btn btn-info btn-sm equal-btn"
                              onclick="viewReservation('<%= reservation._id %>')">
                        View
                      </button>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="5" class="text-center">No appointment history found.</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div><!-- /.col-lg-6 -->

    <!-- Right Column: Approved & Ongoing -->
    <div class="col-lg-6">
      <div class="card p-4 shadow-sm mb-4 approved-reservations">
        <!-- Navigation Tabs -->
        <div class="d-flex align-items-center" style="font-size: 14px; margin-bottom: 10px;">
          <a href="#" id="approvedTab" class="tab-link active" style="margin-right: 10px;">Approved</a>
          <a href="#" id="ongoingTab" class="tab-link" style="margin-right: 10px;">Ongoing</a>
          <button type="button" class="btn btn-sm btn-success" data-toggle="modal" data-target="#plusModal">
            <i class="fas fa-plus"></i>
          </button>
        </div>
        <div class="approved-table-wrapper">
          <!-- Approved View -->
          <div id="approvedView">
            <div class="table-responsive fixed-table-container">
              <table class="table table-hover mb-0">
                <thead>
                  <tr>
                    <th>Owner Name</th>
                    <th class="text-center">Details</th>
                    <th class="actions-column">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <% let approvedReservations = reservations.filter(r =>
                      (r.status === 'Approved' || r.status === 'Canceled') && !r.doctor
                  ); %>
                  <% if (approvedReservations.length > 0) { %>
                    <% approvedReservations.forEach(function(reservation) { %>
                      <% const rowDateA = resolveDate(reservation); %>
                      <tr id="approved-<%= reservation._id %>"
                          data-date="<%= formatLocalDate(rowDateA) %>">
                        <td><%= reservation.ownerName %></td>
                        <td class="text-center">
                          <button class="btn btn-primary btn-sm equal-btn d-block mx-auto"
                                  onclick="viewReservation('<%= reservation._id %>')">
                            View
                          </button>
                        </td>
                        <td class="actions-column">
                          <% if (reservation.status === 'Canceled') { %>
                            <span class="badge badge-secondary">Canceled</span>
                          <% } else { %>
                            <div class="dropdown d-inline-block">
                              <button class="btn btn-primary btn-sm dropdown-toggle equal-btn"
                                      type="button" id="doctorDropdown-<%= reservation._id %>"
                                      data-toggle="dropdown" data-boundary="window">
                                Assign Doctor
                              </button>
                              <div class="dropdown-menu" aria-labelledby="doctorDropdown-<%= reservation._id %>">
                                <% if (doctors && doctors.length > 0) { %>
                                  <% doctors.forEach(function(doctor) { %>
                                    <a class="dropdown-item" href="#"
                                       onclick="assignDoctor('<%= reservation._id %>','<%= doctor._id %>')">
                                      <%= doctor.username %>
                                    </a>
                                  <% }); %>
                                <% } else { %>
                                  <span class="dropdown-item">No doctors available</span>
                                <% } %>
                              </div>
                            </div>
                          <% } %>
                        </td>
                      </tr>
                    <% }); %>
                  <% } else { %>
                    <tr>
                      <td colspan="3" class="text-center">No approved appointments found.</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>

          <!-- Ongoing View -->
          <div id="ongoingView" style="display: none;">
            <div class="table-responsive fixed-table-container">
              <table class="table table-hover mb-0">
                <thead>
                  <tr>
                    <th>Owner Name</th>
                    <th class="text-center">Doctor Name</th>
                    <th class="text-center">Medication</th>
                    <th class="text-center">Status</th>
                    <th class="text-center">Action</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (ongoingReservations.length > 0) { %>
                    <% ongoingReservations.forEach(function(reservation) { %>
                      <% const rowDateO = resolveDate(reservation); %>
                      <tr id="ongoing-<%= reservation._id %>"
                          data-date="<%= formatLocalDate(rowDateO) %>">
                        <td><%= reservation.ownerName %></td>
                        <td class="text-center"><%= reservation.doctor?.username || 'N/A' %></td>
                        <td class="medication-column text-center">
                          <button class="btn btn-info btn-sm equal-btn d-block mx-auto"
                                  onclick="viewReceipt('<%= reservation._id %>')">View Details</button>
                        </td>
                        <td class="text-center">
                          <% if (reservation.status === 'Paid') { %>
                            <span class="badge badge-primary">Paid</span>
                          <% } else if (reservation.status === 'Done') { %>
                            <span class="badge badge-success">Done</span>
                          <% } else { %>
                            <span class="badge badge-secondary">Ongoing</span>
                          <% } %>
                        </td>
                        <td class="text-center">
                          <% if (reservation.petExists && !reservation.isStacked && reservation.status === 'Paid') { %>
                            <button class="btn btn-warning btn-sm"
                                    onclick="updatePetList('<%= reservation._id %>')">
                              Update
                            </button>
                          <% } else if (!reservation.petExists && reservation.status === 'Paid') { %>
                            <button class="btn btn-primary btn-sm"
                                    onclick="addToPetList('<%= reservation._id %>')">
                              Add
                            </button>
                          <% } else { %>
                            N/A
                          <% } %>
                        </td>
                      </tr>
                    <% }); %>
                  <% } else { %>
                    <tr>
                      <td colspan="5" class="text-center">No ongoing appointments found.</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

</div>

<!-- Consultation Receipt Modal -->
<div class="modal fade" id="medicationModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
    <div class="modal-content border-0 rounded shadow-sm">
      <div class="modal-header bg-dark text-white">
        <h5 class="modal-title">Consultation Receipt</h5>
        <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
      </div>
      <div class="modal-body">
        <div id="receiptHeader" class="mb-3"><!-- pet, date, concerns, follow-up --></div>

        <h6 class="d-flex justify-content-start align-items-center">
          Medications
          <button id="btnAddMedReceipt" class="btn btn-sm btn-secondary ml-2">Add</button>
        </h6>

        <div id="receiptMedSelector" class="mb-3" style="display:none;">
          <div class="form-row">
            <div class="col">
              <select id="receiptMedCategory" class="form-control form-control-sm">
                <option value="">-- Choose category --</option>
              </select>
            </div>
            <div class="col">
              <select id="receiptMedProduct" class="form-control form-control-sm">
                <option value="">-- Choose product --</option>
              </select>
            </div>
            <div class="col-2">
              <input type="number" id="receiptMedQtyInput" class="form-control form-control-sm" placeholder="Qty" min="1">
            </div>
            <div class="col-auto">
              <button id="receiptMedAddConfirm" class="btn btn-sm btn-success">Add</button>
            </div>
          </div>
        </div>

        <div id="medicationsByCategory" class="table-responsive mb-3">
          <!-- one table per category will be injected here -->
        </div>

        <h6>Services & Fees</h6>
        <table class="table table-sm mb-3" id="servicesTable">
          <thead class="thead-light">
            <tr>
              <th>Service</th>
              <th>Fee</th>
            </tr>
          </thead>
          <tbody></tbody>
          <tfoot>
            <tr>
              <th colspan="2" class="text-left">
                Services Total: ₱ <span id="svcTotal">0.00</span>
              </th>
            </tr>
          </tfoot>
        </table>

        <div class="d-flex justify-content-end">
          <h5>Grand Total: ₱ <span id="grandTotal">0.00</span></h5>
        </div>
      </div>
      <div class="modal-footer">
        <button id="btnMarkPaid" class="btn btn-success">Mark as Paid</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Medication Modal -->
<div class="modal fade" id="editMedModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
    <div class="modal-content border-0 rounded shadow-sm">
      <div class="modal-header bg-secondary text-white">
        <h5 class="modal-title">Edit Medication</h5>
        <button type="button" class="close text-white" data-dismiss="modal">&times;</button>
      </div>
      <div class="modal-body">
        <form id="editMedForm">
          <div class="form-group">
            <label>Product</label>
            <input type="text" class="form-control" id="editMedName" readonly>
          </div>
          <div class="form-group">
            <label>Quantity</label>
            <input type="number" class="form-control" id="editMedQty" min="0">
          </div>
          <div class="form-group text-right">
            <button type="button" class="btn btn-danger" id="removeMedBtn">Remove</button>
            <button type="submit" class="btn btn-primary">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Consultation Details Modal (HR) -->
<div class="modal fade" id="hrConsultViewModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="view-details-header">Consultation Details</div>
      <div class="modal-body p-4" id="hrConsultDetailsBody"></div>
      <div class="footer-hint">
        <span style="display:block; margin-bottom:4px;">
          Note: Please review all details carefully before closing.
        </span>
        <button type="button" class="btn btn-secondary px-4" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Walk-In Reservation Modal -->
<div class="modal fade" id="plusModal" tabindex="-1" role="dialog" aria-labelledby="plusModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
    <div class="modal-content border-0 rounded-lg shadow">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="plusModalLabel">New Walk-In Reservation</h5>
        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="walkinForm">
        <div class="modal-body">
          <!-- Row 1: Owner & Pet -->
          <div class="form-row mb-3">
            <!-- Owner selector / input -->
            <div class="form-group col-md-6">
              <label for="walkinOwnerSelect">Owner</label>
              <select class="form-control" id="walkinOwnerSelect" name="ownerId">
                <option value="" disabled selected>Select existing owner…</option>
                <%
                  const seen = new Set();
                  petlistEntries.forEach(e => {
                    const id   = e.owner._id.toString();
                    const name = e.owner.username;
                    if (!seen.has(id)) {
                      seen.add(id);
                %>
                  <option value="<%= id %>"><%= name %></option>
                <%   }
                  });
                %>
                <option value="_NEW_">+ New Owner…</option>
              </select>
              + <input
                  type="text"
                  id="walkinOwnerInput"
                  name="ownerName"
                  class="form-control mt-2 d-none"
                  placeholder="Type new owner name"
                >
            </div>

            <!-- Pet selector / input -->
            <div class="form-group col-md-6">
              <label for="walkinPetSelect">Pet</label>
              <select
                class="form-control"
                id="walkinPetSelect"
                name="petName"
                disabled
              >
                <option value="" disabled selected>Select owner first…</option>
              </select>
              + <input
                  type="text"
                  id="walkinPetInput"
                  name="petName"
                  class="form-control mt-2 d-none"
                  placeholder="Type new pet name"
                >
            </div>
          </div>

          <!-- Row 2: Species / Breed / Sex / Existing Disease -->
          <div class="form-row mb-3">
            <div class="form-group col-md-3">
              <label for="walkinSpecies">Species</label>
              <select class="form-control" id="walkinSpecies" name="species" required>
                <option value="" disabled selected>Select…</option>
                <% petDetails.species.forEach(s => { %>
                  <option value="<%= s %>"><%= s %></option>
                <% }) %>
              </select>
            </div>
            <div class="form-group col-md-3">
              <label for="walkinBreed">Breed</label>
              <select class="form-control" id="walkinBreed" name="breed" required>
                <option value="" disabled selected>Select…</option>
              </select>
            </div>
            <div class="form-group col-md-3">
              <label for="walkinSex">Sex</label>
              <select class="form-control" id="walkinSex" name="sex" required>
                <option value="" disabled selected>Choose…</option>
                <option>Male</option>
                <option>Female</option>
              </select>
            </div>
            <div class="form-group col-md-3">
              <label for="walkinDisease">Existing Disease</label>
              <select class="form-control" id="walkinDisease" name="existingDisease" required>
                <option value="" disabled selected>Select…</option>
                <option value="None">None</option>
                <option value="Other">Other</option>
                <% petDetails.diseases.forEach(d => { %>
                  <option value="<%= d %>"><%= d %></option>
                <% }) %>
              </select>
              <input
                type="text"
                class="form-control mt-2 d-none"
                id="walkinOtherDisease"
                name="otherDisease"
                placeholder="Specify other disease"
              >
            </div>
          </div>

          <!-- Row 3: Service / Date / Time -->
          <div class="form-row mb-3">
            <div class="form-group col-md-4">
              <label for="walkinService">Service</label>
              <select class="form-control" id="walkinService" name="service" required>
                <option value="" disabled selected>Select…</option>
                <% petDetails.services.forEach(svc => { %>
                  <option value="<%= svc %>"><%= svc %></option>
                <% }) %>
              </select>
            </div>
            <div class="form-group col-md-4">
              <label for="walkinDate">Date</label>
              <input type="date" class="form-control" id="walkinDate" name="date" required>
            </div>
            <div class="form-group col-md-4">
              <label for="walkinTime">Time</label>
              <input type="time" class="form-control" id="walkinTime" name="time" required>
            </div>
          </div>

          <!-- Row 4: Weight / Temperature / Other Observations -->
          <div class="form-row mb-3">
            <div class="form-group col-md-4">
              <label for="walkinWeight">Weight (kg)</label>
              <input type="number" step="0.1" class="form-control" id="walkinWeight" name="weight" placeholder="e.g. 12.5">
            </div>
            <div class="form-group col-md-4">
              <label for="walkinTemp">Temperature (°C)</label>
              <input type="number" step="0.1" class="form-control" id="walkinTemp" name="temperature" placeholder="e.g. 38.0">
            </div>
            <div class="form-group col-md-4">
              <label for="walkinObservations">Other Observations</label>
              <input type="text" class="form-control" id="walkinObservations" name="observations" placeholder="Any notes…">
            </div>
          </div>

          <!-- Row 5: Concerns (full width) -->
          <div class="form-group mb-0">
            <label for="walkinConcerns">Concerns</label>
            <textarea class="form-control" id="walkinConcerns" name="concerns" rows="2" placeholder="Describe concerns…"></textarea>
          </div>
        </div>

        <div class="modal-footer bg-light">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-primary">Save Reservation</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>window.petDetails = <%- JSON.stringify(petDetails) %>;</script>
<script>window.petsData   = <%- JSON.stringify(pets) %>;</script>


<script>
  // on species change, re-populate "Breed"
  $('#walkinSpecies').on('change', function() {
    const sp = this.value;
    const breeds = petDetails.speciesBreeds[sp]||[];
    const $b = $('#walkinBreed').empty().append('<option disabled selected>Select…</option>');
    breeds.forEach(b => $b.append(`<option>${b}</option>`));
  });

  // show "Other" disease text input
  $('#walkinDisease').on('change', function(){
    $('#walkinOtherDisease')
      .toggleClass('d-none', this.value!=='Other')
      .prop('required', this.value==='Other');
  });
</script>

<script>
$(function(){
  // build owner→pets map (optional helper, kept for future use)
  const ownerPetMap = {};
  window.petsData.forEach(p => {
    const owner = p.owner?.username;
    if (!owner) return;
    ownerPetMap[owner] = ownerPetMap[owner] || [];
    if (!ownerPetMap[owner].includes(p.petName)) {
      ownerPetMap[owner].push(p.petName);
    }
  });
});
</script>
<script>
// Recalculate Meds + Services + Grand totals (safe on empty tables)
function recalcTotals() {
  // meds
  let medTotal = 0;
  $('#medicationsByCategory .line-total').each(function () {
    const n = parseFloat($(this).text());
    if (!isNaN(n)) medTotal += n;
  });
  $('#medTotal').text(medTotal.toFixed(2));

  // services
  let svcTotal = 0;
  $('#servicesTable tbody tr').each(function () {
    const price = parseFloat($(this).data('service-price'));
    if (!isNaN(price)) svcTotal += price;
  });
  $('#svcTotal').text(svcTotal.toFixed(2));

  // grand
  $('#grandTotal').text((medTotal + svcTotal).toFixed(2));
}
</script>

<script>
  function hrFormatVisitDate(dateLike) {
    if (!dateLike) return 'N/A';
    const d = new Date(dateLike);
    if (Number.isNaN(d.getTime())) return String(dateLike);
    return d.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  }
</script>
<script>
  window.ADDED_LABEL = 'Added';
</script>
<script>
$(document).ready(function () {
  $('.dropdown-toggle').dropdown();

  $('#toggleHistory').on('click', function () {
    $('#historySection').toggle();
  });

  // ---- data & helpers ----
  var reservationsData = <%- JSON.stringify(reservations || []) %>;

  function dateKeyLocal(d){
    if (!(d instanceof Date)) d = new Date(d);
    if (isNaN(d)) return '';
    var yyyy = d.getFullYear();
    var mm = ('0'+(d.getMonth()+1)).slice(-2);
    var dd = ('0'+d.getDate()).slice(-2);
    return yyyy + '-' + mm + '-' + dd;
  }

  // selected day (yyyy-mm-dd)
  window.activeDate = dateKeyLocal(new Date());

  // build calendar highlights from Pending reservations (with date fallback)
  var appointmentDates = Object.create(null);
  (reservationsData || []).forEach(function(r){
    if (!r || r.status !== 'Pending') return;
    var d = r.date || (r.schedule && r.schedule.scheduleDate) || r.createdAt;
    var key = dateKeyLocal(d);
    if (key) appointmentDates[key] = true;
  });

  // filter pending rows by window.activeDate
  function filterRows(){
    var shown = 0;
    $('#appointmentsTableBody tr[data-date]').each(function(){
      var rd = $(this).data('date');  // already yyyy-mm-dd
      var show = !window.activeDate || rd === window.activeDate;
      $(this).toggle(show);
      if (show) shown++;
    });
    // empty-state row
    $('#appointmentsTableBody tr.no-appointment').remove();
    if (shown === 0) {
      $('#appointmentsTableBody').append(
        '<tr class="no-appointment"><td colspan="5" class="text-center">No appointments found for the selected date.</td></tr>'
      );
    }
  }

  // ---- datepicker (single init) ----
  $("#datepicker").datepicker({
    dateFormat: "yy-mm-dd",
    beforeShowDay: function(date){
      var key = dateKeyLocal(date);
      return appointmentDates[key]
        ? [true, "has-appointment", "Pending appointments exist"]
        : [true, "no-appointment", "No pending appointments"];
    },
    onSelect: function(dateText){
      window.activeDate = dateText;   // yyyy-mm-dd
      filterRows();
    }
  });
  $("#datepicker").datepicker("setDate", window.activeDate);
  filterRows();

  // ---- header buttons ----
  $('#btnToday').on('click', function(){
    window.activeDate = dateKeyLocal(new Date());
    $("#datepicker").datepicker("setDate", window.activeDate);
    filterRows();
    $('#datepickerContainer').hide();
  });

  $('#btnSelectDate').on('click', function(){
    $('#datepickerContainer').toggle();
    if ($('#datepickerContainer').is(':visible')) {
      $("#datepicker").datepicker("show");
    }
  });

  // ---- search (only visible rows for selected day) ----
  $('#searchInput').on('keyup', function(){
    var q = $(this).val().toLowerCase();
    $('#appointmentsTableBody tr:visible').each(function(){
      var match = $(this).find('.ownerName').text().toLowerCase().indexOf(q) > -1;
      $(this).toggle(match);
    });
  });

  // ---- tabs ----
  $('#approvedTab').on('click', function(e){
    e.preventDefault();
    $(this).addClass('active'); $('#ongoingTab').removeClass('active');
    $('#approvedView').show();  $('#ongoingView').hide();
  });
  $('#ongoingTab').on('click', function(e){
    e.preventDefault();
    $(this).addClass('active'); $('#approvedTab').removeClass('active');
    $('#ongoingView').show();   $('#approvedView').hide();
  });

  // ---- actions exposed for inline onclicks ----
  window.viewReservation = function(id){ viewDetails(id); };

  window.approveReservation = function(reservationId){
    Swal.fire({
      title: 'Approve Reservation?',
      text: 'Are you sure you want to approve this reservation?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Yes, approve',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (!result.isConfirmed) return;
      $.post('/hr/approve-reservation', { reservationId })
        .done(function (response) {
          if (response.success) {
            Swal.fire({ icon:'success', title:'Approved', text:'Reservation has been approved.' })
              .then(() => { $('#reservation-'+reservationId).remove(); location.reload(); });
          } else {
            Swal.fire('Error', response.message || 'Error approving reservation.', 'error');
          }
        })
        .fail(() => Swal.fire('Error','Server error while approving reservation.','error'));
    });
  };

  window.assignDoctor = function(reservationId, doctorId){
    $.post('/hr/assign-doctor', { reservationId, doctorId })
      .done(function (response) {
        if (response.success) {
          Swal.fire({ icon:'success', title:'Doctor Assigned', text:'Reservation remains in Approved until marked as done.' })
            .then(() => location.reload());
        } else {
          Swal.fire('Error', response.message || 'Error assigning doctor.', 'error');
        }
      })
      .fail(() => Swal.fire('Error', 'Server error while assigning doctor.', 'error'));
  };

  // ---- details modal ----
  function viewDetails(reservationId){
    $.get('/hr/get-consultation', { reservationId })
      .done(function(resp){
        if (!resp.success) return Swal.fire('Error', resp.message || 'Error fetching details.', 'error');

        const r = resp.reservation || {};
        const status = (r.status || '').trim();

        function formatVisitDate(dateStr){
          if (!dateStr) return 'N/A';
          const d = new Date(dateStr);
          const month = d.toLocaleString('en-US',{month:'long'}).toLowerCase();
          return `${month} ${d.getDate()} ${d.getFullYear()}`;
        }

        const dateToShow = r.date || (r.schedule && r.schedule.scheduleDate) || r.createdAt;
        const dateFmt    = formatVisitDate(dateToShow);
        const allPetNames = Array.isArray(r.pets) && r.pets.length
          ? r.pets.map(p => (p.petId?.petName || p.petName)).join(', ')
          : 'N/A';

        let html = '<div class="container-fluid p-0">';

        if (status === 'Pending') {
          if (Array.isArray(r.petRequests) && r.petRequests.length){
            html += '<h6 class="mt-1 mb-2" style="font-weight:700;color:#224b7a;">Per-Pet Requests</h6>';
            html += '<table class="details-table mb-3"><thead><tr><th>Pet</th><th>Service</th><th>Concerns</th></tr></thead><tbody>';
            r.petRequests.forEach(pr => {
              html += `<tr>
                <td>${pr.petName || '—'}</td>
                <td>${pr.service || '—'}</td>
                <td>${(pr.concerns && pr.concerns.trim()) ? pr.concerns : '—'}</td>
              </tr>`;
            });
            html += '</tbody></table>';
          } else {
            html += '<p class="mb-0">No pet requests found.</p>';
          }
          html += '</div>';
          $('#hrConsultDetailsBody').html(html);
          return $('#hrConsultViewModal').modal('show');
        }

        html += '<table class="details-table">';
        html += `<tr><th>Pet(s)</th><td>${allPetNames}</td></tr>`;
        html += `<tr><th>Date</th><td>${dateFmt}</td></tr>`;
        html += `<tr><th>Time</th><td>${r.time || 'N/A'}</td></tr>`;
        html += `<tr><th>Doctor</th><td>${(r.doctor && r.doctor.username) ? r.doctor.username : 'N/A'}</td></tr>`;
        html += '</table>';

        if (Array.isArray(r.petRequests) && r.petRequests.length){
          html += '<h6 class="mt-3">Per-Pet Requests</h6>';
          html += '<table class="details-table mb-3"><thead><tr><th>Pet</th><th>Service</th><th>Concerns</th></tr></thead><tbody>';
          r.petRequests.forEach(pr => {
            html += `<tr>
              <td>${pr.petName || '—'}</td>
              <td>${pr.service || '—'}</td>
              <td>${(pr.concerns && pr.concerns.trim()) ? pr.concerns : '—'}</td>
            </tr>`;
          });
          html += '</tbody></table>';
        }

        const showPetInfo = (status !== 'Approved' && status !== 'Pending');
        if (showPetInfo) {
          const hasExtra = (r.pets || []).some(p => p.petId && (p.petId.birthday || p.petId.species || p.petId.breed || p.petId.sex));
          if (hasExtra){
            html += '<h6 class="mt-3">Pet Info</h6>';
            html += '<table class="details-table mb-3"><thead><tr><th>Pet</th><th>Birthday</th><th>Species</th><th>Breed</th><th>Sex</th></tr></thead><tbody>';
            (r.pets || []).forEach(p => {
              const petName = p.petId?.petName || p.petName || '—';
              const bday    = p.petId?.birthday ? formatVisitDate(p.petId.birthday) : 'N/A';
              const species = p.petId?.species || '—';
              const breed   = p.petId?.breed   || '—';
              const sex     = p.petId?.sex     || '—';
              html += `<tr><td>${petName}</td><td>${bday}</td><td>${species}</td><td>${breed}</td><td>${sex}</td></tr>`;
            });
            html += '</tbody></table>';
          }
        }

        if (r.physicalExam) {
          html += '<table class="details-table mb-3"><thead><tr><th>Weight</th><th>Temperature</th><th>Observations</th></tr></thead><tbody>';
          html += `<tr><td>${r.physicalExam.weight || 'N/A'}</td><td>${r.physicalExam.temperature || 'N/A'}</td><td>${r.physicalExam.observations || 'N/A'}</td></tr>`;
          html += '</tbody></table>';
        }
        if (r.diagnosis) html += `<div class="mb-3"><strong>Diagnosis:</strong><p>${r.diagnosis}</p></div>`;
        if (Array.isArray(r.services) && r.services.length){
          html += '<table class="details-table mb-3"><thead><tr><th>Service</th><th>Details</th><th>File</th></tr></thead><tbody>';
          r.services.forEach(s => {
            let url = s.file || '';
            if (url) {
              url = url.replace(/^public/, '').replace(/^([^/])/, '/$1');
              if (!/^https?:\/\//.test(url)) url = window.location.origin + url;
            }
            html += `<tr><td>${s.serviceName || ''}</td><td>${s.details || '—'}</td><td>${url ? `<a href="${url}" download>Download</a>` : '—'}</td></tr>`;
          });
          html += '</tbody></table>';
        }
        if (Array.isArray(r.medications) && r.medications.length){
          html += '<table class="details-table mb-3"><thead><tr><th>Name</th><th>Qty</th><th>Dosage</th><th>Remarks</th></tr></thead><tbody>';
          r.medications.forEach(m => {
            html += `<tr><td>${m.name || m.medicationName || '—'}</td><td>${m.quantity || '—'}</td><td>${m.dosage || '—'}</td><td>${m.remarks || '—'}</td></tr>`;
          });
          html += '</tbody></table>';
        }
        if (r.confinementStatus && r.confinementStatus.length) {
          html += `<p><strong>Confinement:</strong> ${r.confinementStatus.join(', ')}</p>`;
        }
        if (r.notes) html += `<p><strong>Additional Notes:</strong> ${r.notes}</p>`;
        if (r.schedule && (r.schedule.scheduleDate || r.schedule.scheduleDetails)) {
          const d = r.schedule.scheduleDate
            ? new Date(r.schedule.scheduleDate).toLocaleDateString('en-US', { month:'short', day:'numeric', year:'numeric' })
            : '';
          const det = r.schedule.scheduleDetails ? (' — ' + r.schedule.scheduleDetails) : '';
          html += `<hr><p><strong>Follow-Up:</strong> ${d}${det}</p>`;
        }

        html += '</div>';
        $('#hrConsultDetailsBody').html(html);
        $('#hrConsultViewModal').modal('show');
      })
      .fail(() => Swal.fire('Error', 'Server error while fetching details.', 'error'));
  }

  // === Fetch & render the receipt ===

window.viewReceipt = function(reservationId) {
  $.get('/hr/get-consultation-details', { reservationId })
    .done(resp => {
      if (!resp || !resp.success) {
        return Swal.fire('Error', resp?.message || 'Error fetching consultation details.', 'error');
      }

      const data        = resp.data || {};
      const reservation = data.reservation || {};
      const paid        = !!data.payment || reservation.status === 'Paid';

      // --- helpers ---
      function escAttr(s) {
        return String(s || '')
          .replace(/&/g, '&amp;')
          .replace(/"/g, '&quot;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/'/g, '&#39;');
      }

     function fallbackPetName(res, c) {
    
  const pets = res.pets || [];

  // prefer explicit names first
  if (c && c.targetPetName && c.targetPetName !== '-' && c.targetPetName !== '—') return c.targetPetName;
  if (c && c.petName       && c.petName       !== '-' && c.petName       !== '—') return c.petName;

  // try matching by id string
  const pidStr = c && (c.targetPetId || c.petId) ? String(c.targetPetId || c.petId) : '';
  if (pidStr && pets.length) {
    const byId = pets.find(p => String(p.petId && p.petId._id) === pidStr);
    if (byId) return byId.petId?.petName || byId.petName || '—';
  }

  // some old data put the name in the id field
  if (typeof (c && (c.targetPetId || c.petId)) === 'string' && pets.length) {
    const nameMaybe = c.targetPetId || c.petId;
    const byName = pets.find(p => (p.petId?.petName || p.petName) === nameMaybe);
    if (byName) return byName.petId?.petName || byName.petName || '—';
  }

  // single-pet fallback
  if (pets.length === 1) return pets[0].petId?.petName || pets[0].petName || '—';

  return '—';
}

      // consultations[] -> one per pet (fallback to single consultation shape if backend not yet updated)
      const consultations = Array.isArray(data.consultations) && data.consultations.length
        ? data.consultations
        : (function fallback() {
            const one = data.consultation || {};
            return [{
              petId: one.petId || null,
              petName: fallbackPetName(reservation, one),
              medications: Array.isArray(one.medications) ? one.medications : [],
              services:    Array.isArray(one.services)    ? one.services    : []
            }];
          })();

      // ---------- Header ----------
      const petList = (reservation.pets || [])
        .map(p => p.petId?.petName || p.petName)
        .filter(Boolean).join(', ') || '—';

      const visitDate = (reservation.date || reservation.schedule?.scheduleDate || reservation.createdAt)
        ? new Date(reservation.date || reservation.schedule?.scheduleDate || reservation.createdAt)
            .toLocaleDateString('en-US', { month:'short', day:'numeric', year:'numeric' })
        : new Date().toLocaleDateString('en-US', { month:'short', day:'numeric', year:'numeric' });

      let hdr  = `<p><strong>Owner:</strong> ${reservation.ownerName || '—'}</p>`;
          hdr += `<p><strong>Pets:</strong> ${petList}</p>`;
          hdr += `<p><strong>Date:</strong> ${visitDate}</p>`;
          hdr += `<p><strong>Concerns:</strong> ${reservation.concerns || '—'}</p>`;
          hdr += `<p><strong>Follow-Up:</strong>${
                    reservation.schedule
                      ? ' ' + new Date(reservation.schedule.scheduleDate)
                          .toLocaleDateString('en-US', { month:'short', day:'numeric', year:'numeric' }) +
                        ' – ' + (reservation.schedule.scheduleDetails || '')
                      : ' None'
                  }</p>`;
      $('#receiptHeader').html(hdr);

      // ---------- Medications (UNIFIED with Pet column) ----------
      const $medWrap = $('#medicationsByCategory').empty();
      const $medTbl  = $(`
        <div class="table-responsive mb-2">
          <table id="receiptTable" class="table table-sm table-striped mb-0">
            <thead class="thead-light">
              <tr>
                <th>Pet</th><th>Medication</th><th>Qty</th><th>Unit Price</th><th>Line Total</th><th>Edit</th>
              </tr>
            </thead>
            <tbody></tbody>
            <tfoot>
              <tr>
                <th colspan="6" class="text-left">
                  Medications Total: ₱ <span id="medTotal">0.00</span>
                </th>
              </tr>
            </tfoot>
          </table>
        </div>
      `);
      const $medBody = $medTbl.find('tbody');

consultations.forEach(c => {
  (c.medications || []).forEach(m => {
    const unit = Number(m.unitPrice ?? m.price ?? 0);
    const qty  = Number(m.quantity ?? 0);
    const medName = (m.name || m.medicationName || '');
    const isAdded = (m.added === true);

    // raw value for data attributes / payloads
    const petLabelRaw = isAdded ? ADDED_LABEL : fallbackPetName(reservation, c);

    // pretty HTML for the cell (badge when it's an Added row)
    const petCellHtml = isAdded
      ? `<span class="badge badge-secondary">${ADDED_LABEL}</span>`
      : petLabelRaw;

    $medBody.append(`
      <tr data-unit="${unit}"
          data-name="${escAttr(medName)}"
          data-pet="${escAttr(petLabelRaw)}">
        <td>${petCellHtml}</td>
        <td>${medName}</td>
        <td><span class="qty-display">${isNaN(qty) ? 0 : qty}</span></td>
        <td>₱ ${unit.toFixed(2)}</td>
        <td class="line-total">${(unit * (isNaN(qty) ? 0 : qty)).toFixed(2)}</td>
        <td><button class="btn btn-sm btn-primary btn-edit">Edit</button></td>
      </tr>
    `);
  });
});

      $medWrap.append($medTbl);

      // ---------- Services (add Pet column) ----------
      $('#servicesTable thead').html(`
        <tr>
          <th>Pet</th>
          <th>Service</th>
          <th>Fee</th>
        </tr>
      `);
      // ensure footer matches 3 columns
      $('#servicesTable tfoot').html(`
        <tr>
          <th colspan="3" class="text-left">
            Services Total: ₱ <span id="svcTotal">0.00</span>
          </th>
        </tr>
      `);

      const $svcBody = $('#servicesTable tbody').empty();

      consultations.forEach(c => {
        const petLabel = fallbackPetName(reservation, c);
        (c.services || []).forEach(svc => {
          const fee = Number(svc.price) || 0;
          $svcBody.append(`
            <tr data-service-price="${fee}" data-pet="${escAttr(petLabel)}">
              <td>${petLabel}</td>
              <td>${svc.serviceName || ''}</td>
              <td>₱ ${fee.toFixed(2)}</td>
            </tr>
          `);
        });
      });

      // ---------- Totals + button state ----------
      recalcTotals();

      $('#btnMarkPaid')
        .data('id', reservationId)
        .prop('disabled', paid)
        .toggleClass('btn-success', !paid)
        .toggleClass('btn-secondary', paid)
        .text(paid ? 'Paid' : 'Mark as Paid');

      $('#medicationModal').modal('show');
    })
    .fail(() => Swal.fire('Error', 'Error fetching consultation details.', 'error'));
};



  // === MARK AS PAID (single delegated handler) ===
$(document).on('click', '#btnMarkPaid', function() {
  const $btn = $(this);
  const reservationId = $btn.data('id');
  if (!reservationId) return Swal.fire('Error', 'No reservation selected.', 'error');

  const products = [];
  $('#medicationsByCategory table tbody tr').each(function() {
    const pet       = $(this).data('pet') || '';
    const name      = $(this).data('name') || $(this).find('td').eq(1).text().trim();
    const quantity  = parseInt($(this).find('.qty-display').text(), 10) || 0;
    const unitPrice = parseFloat($(this).data('unit')) || 0;
    products.push({ pet, name, quantity, unitPrice, lineTotal: quantity * unitPrice });
  });

  const services = [];
  $('#servicesTable tbody tr').each(function() {
    const pet       = $(this).data('pet') || '';
    const name      = $(this).find('td').eq(1).text().trim();
    const unitPrice = parseFloat($(this).data('service-price')) || 0;
    services.push({ pet, name, quantity: 1, unitPrice, lineTotal: unitPrice });
  });

  const amount = parseFloat($('#grandTotal').text()) || 0;

  Swal.fire({
    icon: 'question',
    title: 'Mark as Paid?',
    text: `Confirm payment of ₱${amount.toFixed(2)}?`,
    showCancelButton: true,
    confirmButtonText: 'Yes, paid'
  }).then(({ isConfirmed }) => {
    if (!isConfirmed) return;

    $.post('/hr/mark-paid', { reservationId, amount, products, services })
      .done(({ success }) => {
        if (!success) return Swal.fire('Error', 'Could not mark paid.', 'error');

        // update ongoing badge to Paid
        const $row = $('#ongoing-' + reservationId);
        $row.find('.badge').removeClass('badge-success badge-secondary').addClass('badge-primary').text('Paid');

        // update modal button
        $btn.text('Paid').prop('disabled', true).removeClass('btn-success').addClass('btn-secondary');

        Swal.fire('Paid!', 'Consultation has been marked as paid.', 'success');
      })
      .fail((xhr) => {
        const err = xhr.responseJSON?.message || 'Server error while marking paid.';
        Swal.fire('Error', err, 'error');
      });
  });
});
  // 3) Live stock check on quantity edits
  $(document).on('input', '.edit-qty', function() {
    const $input     = $(this);
    const $row       = $input.closest('tr');
    const desiredQty = parseInt($input.val(), 10) || 0;
const product = $row.data('name') || $row.find('td').eq(1).text().trim();    if (!product) return recalcTotals();

    $.get('/hr/inventory/checkQuantity', { product })
      .done(r => {
        const available = r.availableQty||0;
        if (desiredQty > available) {
          Swal.fire({
            icon: 'error',
            title: 'Insufficient Stock',
            text: `You entered ${desiredQty}, but only ${available} available.`,
            showCancelButton: true,
            confirmButtonText: `Set to ${available}`,
            cancelButtonText: 'Cancel'
          }).then(res => {
            if (res.isConfirmed) {
              $input.val(available).removeClass('error-input');
            } else {
              $input.addClass('error-input');
            }
            recalcTotals();
          });
        } else {
          $input.removeClass('error-input');
          recalcTotals();
        }
      })
      .fail(() => recalcTotals());
  });

  // 4) Remove a medication row (inline)
  $(document).on('click', '.btn-remove', function() {
    const $row = $(this).closest('tr');
    Swal.fire({
      icon: 'warning',
      title: 'Remove Item?',
      text: 'Are you sure?',
      showCancelButton: true,
      confirmButtonText: 'Yes, remove',
      cancelButtonText: 'Cancel'
    }).then(res => {
      if (res.isConfirmed) {
        $row.remove();
        recalcTotals();
        Swal.fire('Removed!','Item removed successfully.','success');
      }
    });
  });

  let $currentRow = null;

  // 6) Open edit modal (delegated)
  $(document).on('click', '.btn-edit', function() {
    $currentRow = $(this).closest('tr');
    $('#editMedName').val( $currentRow.data('name') );
    $('#editMedQty').val( $currentRow.find('.qty-display').text() );
    $('#editMedModal').modal('show');
  });

  // 7) Handle Save in the edit form
  $('#editMedForm').on('submit', function(e) {
    e.preventDefault();
    const newQty    = parseInt($('#editMedQty').val(), 10) || 0;
    const unit      = parseFloat($currentRow.data('unit')) || 0;
    const medName   = $currentRow.data('name');
    const reservationId = $('#btnMarkPaid').data('id');

    // 1) update the DOM
    $currentRow.find('.qty-display').text(newQty);
    $currentRow.find('.line-total').text((newQty * unit).toFixed(2));
    recalcTotals();
    $('#editMedModal').modal('hide');

    // 2) persist to the server
    $.post('/hr/update-medication', {
      reservationId,
      medicationName: medName,
      quantity: newQty
    }).fail(() => {
      Swal.fire('Error','Could not save quantity change.','error');
    });
  });

  // 8) Handle Remove inside edit modal
  $('#removeMedBtn').click(function() {
    Swal.fire({
      icon: 'warning',
      title: 'Remove this product?',
      showCancelButton: true,
      confirmButtonText: 'Yes, remove'
    }).then(res => {
      if (!res.isConfirmed || !$currentRow) return;
      const medName = $currentRow.data('name');
      const reservationId = $('#btnMarkPaid').data('id');

      // 1) remove from DOM
      $currentRow.remove();
      recalcTotals();
      $('#editMedModal').modal('hide');

      // 2) persist the removal
      $.post('/hr/remove-medication', {
        reservationId,
        medicationName: medName
      }).fail(() => {
        Swal.fire('Error','Could not remove medication.','error');
      });
    });
  });

  // ---------- ADD/UPDATE PET FROM CONSULTATION ----------
  function addPetFromConsultation(reservationId) {
    Swal.fire({
      title: 'Add Pet?',
      text: 'Do you want to add this pet to the pet list?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Yes, add it',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: '/hr/add-pet-from-reservation',
          method: 'POST',
          data: { reservationId: reservationId },
          success: function(response) {
            if (response.success) {
              Swal.fire({
                title: 'Success',
                text: 'Pet successfully added!',
                icon: 'success'
              });
              $('#ongoing-' + reservationId).remove();
            } else {
              Swal.fire('Error', response.message, 'error');
            }
          },
          error: function() {
            Swal.fire('Error', 'Server error while adding pet.', 'error');
          }
        });
      }
    });
  }

  // ---------- MARK AS DONE AND UPDATE PET FROM CONSULTATION ----------
  function markAsDoneAndUpdate(reservationId) {
    Swal.fire({
      title: 'Mark as Done?',
      text: 'Do you want to mark this consultation as done and update the pet details?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Yes, done',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: '/hr/update-pet-from-reservation',
          method: 'POST',
          data: { reservationId: reservationId },
          success: function(response) {
            if (response.success) {
              Swal.fire({
                title: 'Success',
                text: 'Consultation marked as done and pet details updated!',
                icon: 'success'
              }).then(() => {
                if(response.reservation && response.reservation.petAdded) {
                  $('#ongoing-' + reservationId).remove();
                } else {
                  $('#ongoing-' + reservationId + ' button').first().text('Add');
                }
              });
            } else {
              Swal.fire('Error', response.message, 'error');
            }
          },
          error: function() {
            Swal.fire('Error', 'Server error while updating consultation.', 'error');
          }
        });
      }
    });
  }

// replace these function declarations…
// function addToPetList(reservationId) { … }
// function updatePetList(reservationId) { … }

// …with window-bound functions (inside the same $(document).ready):
window.addToPetList = function(reservationId) {
  // existing body unchanged
  Swal.fire({
    title: 'Add Pet?',
    text:  'Do you want to add this pet to your list?',
    icon:  'question',
    showCancelButton: true,
    confirmButtonText: 'Yes, add it'
  }).then(({ isConfirmed }) => {
    if (!isConfirmed) return;
    $.post('/hr/add-to-petlist', { reservationId })
      .done(({ success }) => {
        if (!success) return Swal.fire('Error','Could not add pet.','error');
        Swal.fire('Added!','Pet has been added to your list.','success')
          .then(() => { $('#ongoing-' + reservationId).remove(); });
      })
      .fail(() => Swal.fire('Error','Server error.','error'));
  });
};

window.updatePetList = function(reservationId) {
  Swal.fire({
    title: 'Update Pet?',
    text:  'Do you want to stack this consultation to the pet?',
    icon:  'question',
    showCancelButton: true,
    confirmButtonText: 'Yes, update it'
  }).then(({ isConfirmed }) => {
    if (!isConfirmed) return;
    $.post('/hr/update-petlist', { reservationId })
      .done(({ success }) => {
        if (!success) return Swal.fire('Error','Could not update pet.','error');
        Swal.fire('Updated!','Consultation stacked to this pet.','success')
          .then(() => { $('#ongoing-' + reservationId).remove(); });
      })
      .fail(() => Swal.fire('Error','Server error.','error'));
  });
};

  // quantity sanity check in edit modal
  $('#editMedQty').on('input', function() {
    const $input    = $(this);
    const desiredQty = parseInt($input.val(), 10) || 0;
    const medName    = $currentRow?.data('name');
    if (!medName) return;

    $.get('/hr/inventory/checkQuantity', { product: medName })
      .done(r => {
        const available = r.availableQty || 0;
        if (desiredQty > available) {
          Swal.fire({
            icon: 'error',
            title: 'Insufficient Stock',
            text: `You entered ${desiredQty}, but only ${available} in stock.`,
            showCancelButton: true,
            confirmButtonText: `Use ${available} instead`,
            cancelButtonText: 'Keep typing'
          }).then(result => {
            if (result.isConfirmed) {
              $input.val(available);
            }
          });
        }
      });
  });

  // ---- Add medication flow ----
  $('#btnAddMedReceipt').click(() => {
    $('#receiptMedSelector').toggle();
    if ($('#receiptMedSelector').is(':visible')) {
      $.get('/hr/inventory/categories')
        .done(({ categories }) => {
          const $cat = $('#receiptMedCategory').empty()
                         .append('<option value="">-- Choose category --</option>');
          categories.forEach(c => $cat.append(`<option>${c}</option>`));
        });
    }
  });

  $('#receiptMedCategory').change(function(){
    const cat = this.value;
    $('#receiptMedProduct').empty().append('<option value="">-- Choose product --</option>');
    if (!cat) return;
    $.get('/hr/inventory/listByCategory', { category: cat })
      .done(({ products }) => {
        products.forEach(p =>
          $('#receiptMedProduct').append(`<option value="${p.name}" data-unit="${p.price}">${p.name}</option>`)
        );
      });
  });

  function persistNewMedication(reservationId, name, qty) {
    $.post('/hr/add-medication', {
      reservationId,
      medicationName: name,
      quantity: qty
    }).fail(() => {
      Swal.fire({
        toast: true,
        position: 'top-end',
        icon: 'error',
        title: 'Save failed',
        showConfirmButton: false,
        timer: 1000,
        width: 200
      });
    });
  }

$('#receiptMedAddConfirm').click(() => {
  const name = $('#receiptMedProduct').val();
  const unit = parseFloat($('#receiptMedProduct option:selected').data('unit')) || 0;
  const qty  = parseInt($('#receiptMedQtyInput').val(), 10) || 1;
  const cat  = $('#receiptMedCategory').val() || 'Uncategorized';

  $.get('/hr/inventory/checkQuantity', { product: name })
    .done(r => {
      const avail = r.availableQty || 0;

      function doAdd(q) {
        // 👇 force "Added" label in the Pet column for manual rows
        addRowUnified(name, unit, q, ADDED_LABEL);

        // keep your persistence call (server does not need pet here)
        persistNewMedication($('#btnMarkPaid').data('id'), name, q);

        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'success',
          title: 'Added',
          showConfirmButton: false,
          timer: 800,
          width: 200
        });
      }

      if (qty > avail) {
        Swal.fire({
          icon: 'error',
          title: 'Low stock',
          text: `Only ${avail} in stock.`,
          showCancelButton: true,
          confirmButtonText: `Use ${avail}`,
          cancelButtonText: 'Cancel'
        }).then(res => { if (res.isConfirmed && avail > 0) doAdd(avail); });
      } else {
        doAdd(qty);
      }
    })
    .fail(() => {
      Swal.fire({
        toast: true,
        position: 'top-end',
        icon: 'error',
        title: 'Stock check failed',
        showConfirmButton: false,
        timer: 1000,
        width: 200
      });
    });
});

function addRowUnified(name, unit, qty, petLabel) {
  const label = petLabel || (typeof ADDED_LABEL !== 'undefined' ? ADDED_LABEL : 'Added');

  const $tbl = $('#receiptTable');
  if (!$tbl.length) return;

  const lineTotal = (unit * qty).toFixed(2);
  const esc = s => String(s || '')
    .replace(/&/g,'&amp;')
    .replace(/"/g,'&quot;')
    .replace(/</g,'&lt;')
    .replace(/>/g,'&gt;')
    .replace(/'/g,'&#39;');

  $tbl.find('tbody').append(`
    <tr data-origin="added"
        data-unit="${unit}"
        data-name="${esc(name)}"
        data-pet="${esc(label)}">
      <td><span class="badge badge-secondary">${label}</span></td>
      <td>${esc(name)}</td>
      <td><span class="qty-display">${qty}</span></td>
      <td>₱ ${unit.toFixed(2)}</td>
      <td class="line-total">${lineTotal}</td>
      <td>
        <button class="btn btn-sm btn-primary btn-edit">Edit</button>
        <button class="btn btn-sm btn-link text-danger btn-remove" title="Remove">Remove</button>
      </td>
    </tr>
  `);

  recalcTotals();
  $('#receiptMedSelector').hide();
}


  // Remove row (delegated toast-style)
  $(document).on('click', '.btn-remove', function() {
    const $row = $(this).closest('tr');
    Swal.fire({
      toast: true,
      position: 'top-end',
      icon: 'warning',
      title: 'Remove this item?',
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      width: 200
    }).then(res => {
      if (res.isConfirmed) {
        const name = $row.data('name');
        const reservationId = $('#btnMarkPaid').data('id');
        $row.remove();
        recalcTotals();
        $.post('/hr/remove-medication', { reservationId, medicationName: name })
          .fail(() => {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Remove failed',
              showConfirmButton: false,
              timer: 1000,
              width: 200
            });
          });
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: 'success',
          title: 'Removed',
          showConfirmButton: false,
          timer: 800,
          width: 200
        });
      }
    });
  });

  // ---------- Walk-in modal name swapping ----------
  function swapName($keep, keepName, $drop){
    $keep.attr('name', keepName);
    $drop.removeAttr('name');
  }

  $('#walkinOwnerSelect').on('change', function(){
    const ownerId = this.value;

    $('#walkinPetSelect')
      .prop('disabled', true)
      .html('<option value="" disabled selected>Select owner first…</option>');
    $('#walkinOwnerInput, #walkinPetInput')
      .addClass('d-none')
      .prop('required', false)
      .val('');

    swapName($('#walkinOwnerSelect'), 'ownerId', $('#walkinOwnerInput'));
    swapName($('#walkinPetSelect'),   'petName', $('#walkinPetInput'));

    if (ownerId === '_NEW_') {
      $('#walkinOwnerInput').removeClass('d-none').prop('required', true);
      $('#walkinPetInput').removeClass('d-none').prop('required', true);

      swapName($('#walkinOwnerInput'), 'ownerName', $('#walkinOwnerSelect'));
      swapName($('#walkinPetInput'),   'petName',   $('#walkinPetSelect'));
    } else {
      $('#walkinOwnerInput').addClass('d-none').prop('required', false);

      $.get('/hr/get-owner-pets', { ownerId })
        .done(({ pets }) => {
          const opts =
            `<option value="" disabled selected>Select pet…</option>` +
            pets.map(p => `<option>${p}</option>`).join('') +
            `<option value="_NEW_">+ New Pet…</option>`;
          $('#walkinPetSelect').prop('disabled', false).html(opts);
        })
        .fail(() => console.error('Failed to load pets for owner:', ownerId));
    }
  });

  $('#walkinPetSelect').on('change', function(){
    if (this.value === '_NEW_') {
      $('#walkinPetInput').removeClass('d-none').prop('required', true);
      swapName($('#walkinPetInput'), 'petName', $('#walkinPetSelect'));
    } else {
      $('#walkinPetInput').addClass('d-none').prop('required', false).val('');
      swapName($('#walkinPetSelect'), 'petName', $('#walkinPetInput'));
    }
  });

  $('#plusModal').on('show.bs.modal', function(){
    swapName($('#walkinOwnerSelect'), 'ownerId', $('#walkinOwnerInput'));
    swapName($('#walkinPetSelect'),   'petName',   $('#walkinPetInput'));
    $('#walkinPetInput').removeAttr('name');
  });

  $('#walkinForm').on('submit', function(e){
    e.preventDefault();
    const payload = $(this).serialize();

    $.post('/hr/walkin-reservation', payload)
      .done(res => {
        if (res.success) {
          Swal.fire('Saved!','Walk-in added.','success')
            .then(() => location.reload());
        } else {
          Swal.fire('Error', res.message || 'Could not save.','error');
        }
      })
      .fail(() => {
        Swal.fire('Error','Server error.','error');
      });
  });

}); // end document.ready
</script>
