<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Inventory</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <style>
    body { background: #f7faff; font-family: 'Segoe UI', Arial, sans-serif; }

    /* Top actions (buttons only, title removed) */
    .top-actions { margin-top: 24px; margin-bottom: 8px; }

    /* KPI cards: full-width responsive grid */
    .analytics-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 0.9rem;
      margin-bottom: 1.2rem;
      align-items: stretch;
    }
    .analytic-card {
      background: #fff;
      border-radius: 14px;
      box-shadow: 0 2px 10px rgba(22,105,187,0.06);
      padding: 1rem 1.2rem;
      color: #1669bb;
      text-align: left;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      border: 1px solid #e8f0fb;
    }
    .analytic-card > div:first-child {
      font-weight: 600;
      font-size: .98rem;
      color: #2a5298;
      opacity: .9;
      margin-bottom: .35rem;
    }
    .analytic-card > span {
      font-size: 1.75rem;
      line-height: 1.2;
      font-weight: 800;
      color: #1b4e8e;
    }

    /* Filters row */
    .filter-container {
      display: flex;
      gap: .6rem;
      align-items: center;
      margin-bottom: 14px;
      justify-content: flex-end;
      flex-wrap: wrap;
    }
    .filter-container .form-control { max-width: 210px; }

    /* Table */
    .table-wrap {
      background: #fff;
      border-radius: 14px;
      box-shadow: 0 2px 8px rgba(22,105,187,0.07);
      border: 1px solid #e8f0fb;
      overflow: hidden;
    }
    .table-inventory { margin-bottom: 0; }
    .table-inventory th, .table-inventory td { vertical-align: middle !important; text-align: center; }
    .table-inventory thead th {
      background: #eaf3fd;
      color: #1669bb;
      border-bottom: 2px solid #1669bb;
      font-weight: 600;
      font-size: .95rem;
    }
    .table-inventory tbody tr { transition: background .15s ease; }
    .table-inventory tbody tr:hover { background: #f3f8fe; }
    .table-inventory .btn-info { background: #1669bb; border: none; }
    .table-inventory .btn-info:hover { background: #155a9c; }
    .table-inventory .btn-danger { background: #3570af; border: none; }
    .table-inventory .btn-danger:hover { background: #285a88; }

    .badge-low { background: #3570af; color: #fff; }
    .badge-instock { background: #1669bb; color: #fff; }
    .badge-expiry { background: #a4caef; color: #1669bb; }

    /* Modal Redesign */
    .modal-content.inventory-modal { border-radius: 18px; box-shadow: 0 4px 24px rgba(22,105,187,0.16); background: #fafdff; border: 1.5px solid #e5f1fb; }
    .inventory-modal .modal-header { border-bottom: none; background: #e5f1fb; border-top-left-radius: 18px; border-top-right-radius: 18px; padding-bottom: 0.6rem; }
    .inventory-modal .modal-title { color: #1669bb; font-weight: 600; font-size: 1.35rem; letter-spacing: 0.3px; }
    .inventory-modal .modal-body { padding: 1.6rem 1.2rem 1.2rem 1.2rem; }
    .inventory-modal .form-row { margin-bottom: 1.1rem; display: flex; flex-wrap: wrap; gap: 16px 0; }
    .inventory-modal .form-group { margin-bottom: 0; padding: 0 8px; }
    .inventory-modal label { font-weight: 600; color: #1669bb; font-size: .98rem; margin-bottom: 0.35rem; }
    .inventory-modal .form-control { border-radius: 10px; border: 1.2px solid #b2cbe9; font-size: 1.03rem; background: #f6faff; color: #194673; }
    .inventory-modal .form-control:focus { border-color: #1669bb; box-shadow: 0 0 0 0.15rem rgba(22,105,187,0.14); background: #fafdff; }
    .inventory-modal .section-title { color: #2a5298; font-size: 1rem; font-weight: 700; letter-spacing: .02rem; margin-bottom: .8rem; margin-top: .1rem; }
    .inventory-modal .modal-footer { border-top: none; background: #e5f1fb; border-bottom-left-radius: 18px; border-bottom-right-radius: 18px; padding-top: .9rem; }
    .inventory-modal .btn-primary { background: #1669bb; border: none; border-radius: 8px; padding: .48rem 2.1rem; font-weight: 600; font-size: 1.02rem; }
    .inventory-modal .btn-outline-secondary { border-radius: 8px; font-weight: 500; }
    .expiration-inputs { background: #f3f7fc; border-radius: 8px; padding: 0.8rem; margin-top: 0.25rem; min-height: 46px; }

    @media (max-width: 990px) {
      .filter-container { justify-content: stretch; }
      .filter-container .form-control { max-width: 100%; }
    }
  </style>
</head>
<body>
<div class="container-fluid px-3 px-md-4">

  <!-- Actions -->
  <div class="d-flex justify-content-end align-items-center top-actions">
    <button class="btn btn-outline-primary mr-2" data-toggle="modal" data-target="#manageCategoriesModal">Manage Categories</button>
    <button class="btn btn-primary" data-toggle="modal" data-target="#addModal" style="background:#1669bb;border:none;">+ Add Item</button>
  </div>

  <!-- KPI Cards -->
  <div class="analytics-cards" id="analytics-cards"></div>

  <!-- Filters -->
  <div class="filter-container">
    <input type="text" id="searchBar" class="form-control" placeholder="Search by name">
    <select id="categoryFilter" class="form-control">
      <option value="">All Categories</option>
    </select>
    <select id="statusFilter" class="form-control">
      <option value="">All Status</option>
      <option value="lowstock">Low Stock (≤10)</option>
      <option value="nearexpiry">Near Expiry (30d)</option>
      <option value="expired">Expired</option>
    </select>
  </div>

  <!-- Inventory Table -->
  <div class="table-wrap">
    <div style="overflow-x:auto;">
      <table class="table table-inventory table-hover">
        <thead>
          <tr>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Status</th>
            <th>Expiration</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="inventoryTableBody"></tbody>
      </table>
    </div>
  </div>

  <nav class="mt-3">
    <ul class="pagination justify-content-center" id="paginationControls"></ul>
  </nav>
</div>

<!-- ADD MODAL -->
<div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <form id="inventoryForm" class="modal-content inventory-modal">
      <div class="modal-header">
        <h5 class="modal-title" id="addModalLabel">Add New Inventory Item</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span style="font-size:2rem;">&times;</span>
        </button>
      </div>

      <div class="modal-body">
        <div class="section-title">Basic Details</div>
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="itemName">Item Name</label>
            <input type="text" class="form-control" id="itemName" name="name" required autocomplete="off">
          </div>

          <div class="form-group col-md-6">
            <label for="itemCategorySelect">Category</label>
            <select class="form-control" id="itemCategorySelect" name="category" required>
              <option value="">Select Category</option>
            </select>
          </div>
        </div>

        <div class="section-title">Inventory & Expiration</div>
        <div class="form-row">
          <div class="form-group col-md-4">
            <label for="itemBasePrice">Base Price (₱)</label>
            <input type="number" step="0.01" class="form-control" id="itemBasePrice" name="basePrice" required min="0">
          </div>

          <div class="form-group col-md-4">
            <label for="itemMarkup">Markup (₱)</label>
            <input type="number" step="0.01" class="form-control" id="itemMarkup" name="markup" value="0" min="0">
            <small id="addPricePreview" class="text-muted d-block mt-1"></small>
          </div>

          <div class="form-group col-md-4">
            <label for="itemQuantity">Quantity</label>
            <input type="number" class="form-control" id="itemQuantity" name="quantity" required min="1">
          </div>
        </div>

        <!-- One-date-for-all controls -->
        <div class="d-flex align-items-center mb-2" id="oneDateControls">
          <div class="custom-control custom-checkbox mr-3">
            <input type="checkbox" class="custom-control-input" id="useOneDate">
            <label class="custom-control-label" for="useOneDate">Use one expiration date for all</label>
          </div>
          <input type="date" class="form-control" id="oneExpirationDate" style="max-width:220px;" disabled>
          <button type="button" class="btn btn-outline-primary ml-2" id="applyDateToAll" disabled>Apply to all</button>
        </div>

        <div class="form-row">
          <div class="form-group col-md-12">
            <label>Expiration Dates</label>
            <div class="expiration-inputs" id="expirationDatesContainer">
              <small class="text-muted">Optional • Auto-generate based on quantity</small>
            </div>
          </div>
        </div>
      </div>

      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Add Item</button>
        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- EDIT MODAL -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <form id="editForm" class="modal-content inventory-modal">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalLabel">Edit Inventory Item</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span style="font-size:2rem;">&times;</span>
        </button>
      </div>

      <div class="modal-body">
        <input type="hidden" id="editId" name="id">

        <div class="section-title">Basic Details</div>
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="editName">Item Name</label>
            <input type="text" class="form-control" id="editName" name="name" required autocomplete="off">
          </div>

          <div class="form-group col-md-6">
            <label for="editCategorySelect">Category</label>
            <select class="form-control" id="editCategorySelect" name="category" required>
              <option value="">Select Category</option>
            </select>
          </div>
        </div>

        <div class="section-title">Inventory & Expiration</div>
        <div class="form-row">
          <div class="form-group col-md-4">
            <label for="editBasePrice">Base Price (₱)</label>
            <input type="number" step="0.01" class="form-control" id="editBasePrice" name="basePrice" required min="0">
          </div>

          <div class="form-group col-md-4">
            <label for="editMarkup">Markup (₱)</label>
            <input type="number" step="0.01" class="form-control" id="editMarkup" name="markup" value="0" min="0">
            <small id="editPricePreview" class="text-muted d-block mt-1"></small>
          </div>

          <div class="form-group col-md-4">
            <label for="editQuantity">Quantity</label>
            <input type="number" class="form-control" id="editQuantity" name="quantity" required min="1">
          </div>
        </div>

        <div class="form-row">
          <div class="form-group col-md-12">
            <label>Expiration Dates</label>
            <div class="expiration-inputs" id="editExpirationDatesContainer"></div>
          </div>
        </div>
      </div>

      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Save Changes</button>
        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Expiry Modal -->
<div class="modal fade" id="viewDatesModal" tabindex="-1" aria-labelledby="viewDatesModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header" style="background:#e5f1fb;">
        <h5 class="modal-title" id="viewDatesModalLabel" style="color:#1669bb;">Expiration Dates</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span style="font-size:2rem;">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="viewDatesContent"></div>
      <div class="modal-footer" style="background:#e5f1fb;">
        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- MANAGE CATEGORIES MODAL -->
<div class="modal fade" id="manageCategoriesModal" tabindex="-1" aria-labelledby="manageCategoriesLabel" aria-hidden="true">
  <div class="modal-dialog modal-md modal-dialog-centered">
    <div class="modal-content inventory-modal">
      <div class="modal-header">
        <h5 class="modal-title" id="manageCategoriesLabel">Manage Categories</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span style="font-size:2rem;">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="input-group mb-3">
          <input type="text" id="newCategoryName" class="form-control" placeholder="New category name">
          <div class="input-group-append">
            <button class="btn btn-primary" id="btnAddCategory">Add</button>
          </div>
        </div>
        <ul class="list-group" id="categoriesList"></ul>
        <small class="text-muted d-block mt-2">Tip: Renaming a category updates all items using it.</small>
      </div>
      <div class="modal-footer">
        <button class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
(function(){
  let currentPage = 1, itemsPerPage = 10, allInventory = [];
  const LOW_STOCK = 10;

  // ---------- Categories ----------
  function loadCategories() {
    return $.get('/admin/get-categories').then(function(cats){
      cats = (Array.isArray(cats) ? cats : []).filter(Boolean).sort((a,b)=>a.localeCompare(b));
      const makeOpts = (includeBlank, blankText) =>
        (includeBlank ? '<option value="">' + blankText + '</option>' : '') +
        cats.map(c => '<option value="'+c+'">'+(c.charAt(0).toUpperCase()+c.slice(1))+'</option>').join('');

      $('#itemCategorySelect').html(makeOpts(true, 'Select Category'));
      $('#editCategorySelect').html(makeOpts(true, 'Select Category'));
      $('#categoryFilter').html(makeOpts(true, 'All Categories'));
    });
  }

  // ---------- Analytics (chart removed; keep metrics) ----------
  function renderAnalytics(items) {
    const total = items.length;
    const lowStock = items.filter(i => i.quantity <= LOW_STOCK).length;
    const nearExpiry = items.filter(i =>
      (i.expirationDates||[]).some(date=>{
        let d = new Date(date), diff = (d-new Date())/(1000*60*60*24);
        return diff > 0 && diff <= 30;
      })
    ).length;
    const expiredCount = items.reduce((sum, i) => sum + ((i.expiredDates||[]).length), 0);
    const totalValue = items.reduce((sum, i) => sum + (i.price*i.quantity), 0);
    $('#analytics-cards').html(`
      <div class="analytic-card"><div>Total Items</div><span>${total}</span></div>
      <div class="analytic-card"><div>Low Stock (&le;${LOW_STOCK})</div><span>${lowStock}</span></div>
      <div class="analytic-card"><div>Near Expiry (30d)</div><span>${nearExpiry}</span></div>
      <div class="analytic-card"><div>Expired</div><span>${expiredCount}</span></div>
      <div class="analytic-card"><div>Total Value (₱)</div><span>₱${totalValue.toLocaleString()}</span></div>
    `);
  }

  // ---------- Table Render ----------
  function renderTable(data) {
    const searchText = $('#searchBar').val().toLowerCase();
    const categoryFilter = $('#categoryFilter').val();
    const statusFilter = $('#statusFilter').val();

    let filtered = data.filter(item =>
      item.name.toLowerCase().includes(searchText) &&
      (!categoryFilter || item.category === categoryFilter)
    );

    if(statusFilter === "lowstock") {
      filtered = filtered.filter(item => item.quantity <= LOW_STOCK);
    }
    if(statusFilter === "nearexpiry") {
      filtered = filtered.filter(item =>
        (item.expirationDates||[]).some(date=>{
          let d = new Date(date), diff = (d-new Date())/(1000*60*60*24);
          return diff > 0 && diff <= 30;
        })
      );
    }
    if(statusFilter === "expired") {
      filtered = filtered.filter(item => (item.expiredDates||[]).length > 0);
    }

    const total = filtered.length, totalPages = Math.ceil(total/itemsPerPage);
    if(currentPage>totalPages) currentPage=totalPages||1;
    let paginated = filtered.slice((currentPage-1)*itemsPerPage, currentPage*itemsPerPage);

    let tbody = '';
    paginated.forEach(item=>{
      let status = '';
      if(item.quantity <= LOW_STOCK) status += `<span class="badge badge-low mr-1">Low</span>`;
      else status += `<span class="badge badge-instock mr-1">In Stock</span>`;
      if((item.expirationDates||[]).some(date=>{
        let d = new Date(date), diff = (d-new Date())/(1000*60*60*24);
        return diff > 0 && diff <= 30;
      })) status += `<span class="badge badge-expiry">Expiring</span>`;
      if((item.expiredDates||[]).length > 0) status += `<span class="badge badge-danger">Expired</span>`;

      let expDates = (item.expirationDates||[]).length
        ? `<button class="btn btn-sm btn-outline-info view-dates-btn" data-expdates='${JSON.stringify(item.expirationDates).replace(/"/g,'&quot;')}'>View</button>`
        : 'N/A';

      tbody += `
      <tr>
        <td>${item.name}</td>
        <td>${item.category}</td>
        <td>₱${parseFloat(item.price).toFixed(2)}</td>
        <td>${item.quantity}</td>
        <td>${status}</td>
        <td>${expDates}</td>
        <td>
          <button class="btn btn-sm btn-info edit-btn" data-id="${item._id}">Edit</button>
          <button class="btn btn-sm btn-danger delete-btn" data-id="${item._id}">Delete</button>
        </td>
      </tr>`;
    });
    $('#inventoryTableBody').html(tbody);
    renderPagination(totalPages);
    renderAnalytics(filtered.length ? filtered : data);
  }

  function renderPagination(totalPages) {
    let html = '';
    if(totalPages<=1){$('#paginationControls').html('');return;}
    html += `<li class="page-item ${currentPage===1?'disabled':''}">
               <a class="page-link" href="#" data-page="${currentPage-1}">Previous</a>
             </li>`;
    for(let i=1;i<=totalPages;i++) html += `
      <li class="page-item ${currentPage===i?'active':''}">
        <a class="page-link" href="#" data-page="${i}">${i}</a>
      </li>`;
    html += `<li class="page-item ${currentPage===totalPages?'disabled':''}">
               <a class="page-link" href="#" data-page="${currentPage+1}">Next</a>
             </li>`;
    $('#paginationControls').html(html);
  }

  function loadInventory() {
    $.get('/admin/inventory/list', d=>{
      allInventory = d;
      renderTable(d);
    });
  }

  // ---------- Price Preview ----------
  function fmt(n){ return '₱' + (Number(n)||0).toFixed(2); }
  function updateAddPreview(){
    const b = parseFloat($('#itemBasePrice').val())||0;
    const m = parseFloat($('#itemMarkup').val())||0;
    $('#addPricePreview').text(`Selling Price = ${fmt(b)} + ${fmt(m)} = ${fmt(b+m)}`);
  }
  function updateEditPreview(){
    const b = parseFloat($('#editBasePrice').val())||0;
    const m = parseFloat($('#editMarkup').val())||0;
    $('#editPricePreview').text(`Selling Price = ${fmt(b)} + ${fmt(m)} = ${fmt(b+m)}`);
  }

  // ---------- Add modal: expiration controls ----------
  function getAddDateInputs() {
    return $('#expirationDatesContainer').find('input[type="date"][name="expirationDates[]"]');
  }
  function setAllDates(value) {
    const $inputs = getAddDateInputs();
    $inputs.each(function(){ $(this).val(value); });
  }
  function toggleOneDateControls(enabled) {
    $('#oneExpirationDate').prop('disabled', !enabled);
    $('#applyDateToAll').prop('disabled', !enabled);
  }

  // NEW: keep apply button state sticky
  function markAppliedState(applied){
    const $btn = $('#applyDateToAll');
    if (applied) {
      $btn.text('Applied to all')
          .removeClass('btn-outline-primary')
          .addClass('btn-success');
    } else {
      $btn.text('Apply to all')
          .removeClass('btn-success')
          .addClass('btn-outline-primary');
    }
  }

  // Regenerate expiration inputs preserving values; auto-apply if single-date is on
  function regenerateAddDateInputs(qty){
    qty = Math.max(0, parseInt(qty)||0);
    const c = $('#expirationDatesContainer');
    const existing = c.find('input[name="expirationDates[]"]').map(function(){ return $(this).val(); }).get();

    c.empty();
    for(let i=1;i<=qty;i++){
      const val = existing[i-1] || '';
      c.append('<label>Expiration Date '+i+'</label><input type="date" class="form-control mb-2" name="expirationDates[]" value="'+ val +'">');
    }

    const useOne = $('#useOneDate').is(':checked');
    const oneVal = $('#oneExpirationDate').val();
    toggleOneDateControls(qty > 0 && useOne);

    if (useOne && oneVal) {
      setAllDates(oneVal);
      markAppliedState(true);   // stay “Applied to all”
    } else {
      markAppliedState(false);
    }
  }

  // Quantity → regenerate in REAL-TIME (input + change)
  $('#itemQuantity').on('input change', function() {
    regenerateAddDateInputs($(this).val());
  });

  // One-date toggle
  $('#useOneDate').on('change', function(){
    const checked = $(this).is(':checked');
    const qty = parseInt($('#itemQuantity').val())||0;
    toggleOneDateControls(checked && qty > 0);
    if (checked) {
      const v = $('#oneExpirationDate').val();
      if (v) { setAllDates(v); markAppliedState(true); }
    } else {
      markAppliedState(false);
    }
  });

  // Change single date → auto-apply and keep “Applied to all”
  $('#oneExpirationDate').on('change', function(){
    if ($('#useOneDate').is(':checked')) {
      const v = $(this).val();
      if (v) { setAllDates(v); markAppliedState(true); }
    }
  });

  // Button: Apply to all (sticky label)
  $('#applyDateToAll').on('click', function(){
    const v = $('#oneExpirationDate').val();
    if (!v) return;
    setAllDates(v);
    markAppliedState(true); // DO NOT revert
  });

  // ---------- Filters & pagination ----------
  $('#searchBar,#categoryFilter,#statusFilter').on('keyup change',()=>{
    currentPage=1;
    renderTable(allInventory);
  });
  $('#paginationControls').on('click','a',function(e){
    e.preventDefault();
    let page = parseInt($(this).data('page'));
    if(!isNaN(page)) { currentPage=page; renderTable(allInventory); }
  });

  // Add inventory
  $('#inventoryForm').on('submit', function(e){
    e.preventDefault();
    var form = this;
    $.post('/admin/inventory/add', $(form).serialize())
      .done(function(res){
        $('#addModal').modal('hide');
        setTimeout(function() {
          Swal.fire({ icon:'success', title:'Success', text:res.message, timer:1500, showConfirmButton:false })
            .then(()=>{
              form.reset();
              $('#expirationDatesContainer').empty();
              // reset single-date controls
              $('#useOneDate').prop('checked', false);
              $('#oneExpirationDate').val('');
              toggleOneDateControls(false);
              markAppliedState(false);

              loadInventory();
              loadCategories();
              updateAddPreview();
            });
          $('.modal-backdrop').remove();
          $('body').removeClass('modal-open').css('padding-right','');
        }, 400);
      })
      .fail(function(){
        Swal.fire('Error','Error adding item.','error');
      });
  });

  // Price previews on input
  $('#itemBasePrice,#itemMarkup').on('input', updateAddPreview);
  $('#editBasePrice,#editMarkup').on('input', updateEditPreview);

  // Edit inventory (open modal & populate)
  $('#inventoryTableBody').on('click','.edit-btn',function(){
    let id=$(this).data('id');
    $.get('/admin/inventory/item/'+id, item=>{
      $('#editId').val(item._id);
      $('#editName').val(item.name);

      loadCategories().then(()=>{
        const $sel = $('#editCategorySelect');
        if ($sel.find('option[value="'+ item.category +'"]').length === 0 && item.category) {
          $sel.append('<option value="'+item.category+'">'+(item.category.charAt(0).toUpperCase()+item.category.slice(1))+'</option>');
        }
        $sel.val(item.category);
      });

      $('#editBasePrice').val(item.basePrice);
      $('#editMarkup').val(item.markup);
      $('#editQuantity').val(item.quantity);

      let c = $('#editExpirationDatesContainer'); c.empty();
      let qty = item.quantity || 0;
      for(let i=0;i<qty;i++) {
        let val = (item.expirationDates && item.expirationDates[i])
                  ? String(item.expirationDates[i]).split("T")[0]
                  : "";
        c.append('<label>Expiration Date '+(i+1)+'</label><input type="date" class="form-control mb-2" name="expirationDates[]" value="'+ val +'">');
      }
      updateEditPreview();
      $('#editModal').modal('show');
    }).fail(()=>Swal.fire('Error','Error fetching item.','error'));
  });

  // Dynamic expiration dates for edit
  $('#editQuantity').on('change', function() {
    let qty = parseInt($(this).val()) || 0;
    let container = $('#editExpirationDatesContainer');
    let currentDates = [];
    container.find('input').each(function() { currentDates.push($(this).val()); });
    container.empty();
    for (let i = 1; i <= qty; i++) {
      let val = currentDates[i - 1] || "";
      container.append('<label>Expiration Date ' + i + '</label><input type="date" class="form-control mb-2" name="expirationDates[]" value="'+ val +'">');
    }
  });

  // Submit edit form
  $('#editForm').on('submit',function(e){
    e.preventDefault();
    $.post('/admin/inventory/edit', $(this).serialize())
      .done(res=>{
        Swal.fire('Success',res.message,'success');
        $('#editModal').modal('hide');
        setTimeout(function(){ loadInventory(); loadCategories(); }, 400);
      }).fail(()=>Swal.fire('Error','Error updating item.','error'));
  });

  // Delete
  $('#inventoryTableBody').on('click','.delete-btn',function(){
    let id=$(this).data('id');
    Swal.fire({ title:'Are you sure to delete this item?', icon:'warning', showCancelButton:true })
      .then(r=>{
        if(r.isConfirmed){
          $.post('/admin/inventory/delete',{id},res=>{
            Swal.fire('Deleted',res.message,'success');
            loadInventory();
            loadCategories();
          }).fail(()=>Swal.fire('Error','Error deleting item.','error'));
        }
      });
  });

  // View Expiration Dates
  $(document).on('click', '.view-dates-btn', function() {
    let expDates = $(this).data('expdates');
    if (!Array.isArray(expDates)) {
      try { expDates = JSON.parse(expDates); } catch(e) { expDates = []; }
    }
    let content = '';
    expDates.forEach((date, i) => {
      let formatted = new Date(date).toLocaleDateString('en-US', {month:'long',day:'numeric',year:'numeric'});
      content += '<p>Expiration Date '+(i+1)+': '+formatted+'</p>';
    });
    $('#viewDatesContent').html(content);
    $('#viewDatesModal').modal('show');
  });

  // ====== Category Manager (modal) ======
  function fetchCategoriesFull() { return $.get('/admin/categories'); } // [{_id, name}]
  function escapeHtml(s){ return String(s||'').replace(/[&<>"']/g, m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[m])); }
  function escapeAttr(s){ return escapeHtml(s).replace(/"/g,'&quot;'); }

  function renderCategoriesList(rows) {
    const html = rows.map(r => `
      <li class="list-group-item d-flex align-items-center justify-content-between" data-id="${r._id}">
        <div class="cat-view d-flex align-items-center" style="gap:.5rem;">
          <span class="cat-name">${escapeHtml(r.name)}</span>
        </div>
        <div class="cat-actions">
          <button class="btn btn-sm btn-outline-primary btn-rename">Rename</button>
          <button class="btn btn-sm btn-outline-danger btn-delete ml-2">Delete</button>
        </div>

        <div class="cat-edit d-none">
          <div class="input-group">
            <input type="text" class="form-control input-newname" value="${escapeAttr(r.name)}">
            <div class="input-group-append">
              <button class="btn btn-primary btn-save-rename">Save</button>
              <button class="btn btn-outline-secondary btn-cancel-rename">Cancel</button>
            </div>
          </div>
        </div>
      </li>
    `).join('');
    $('#categoriesList').html(html);
  }

  function refreshCategoriesUI() {
    return fetchCategoriesFull().then(rows => {
      renderCategoriesList(rows);
      return loadCategories();
    });
  }

  // Open Manage Categories → load list
  $('#manageCategoriesModal').on('show.bs.modal', function(){
    refreshCategoriesUI();
  });

  // Add category
  $('#btnAddCategory').on('click', function(){
    const name = ($('#newCategoryName').val() || '').trim();
    if (!name) return Swal.fire('Oops', 'Please enter a category name.', 'info');
    $.post('/admin/categories', { name })
      .done(() => {
        $('#newCategoryName').val('');
        refreshCategoriesUI();
        Swal.fire({ icon:'success', title:'Added', timer:1000, showConfirmButton:false });
      })
      .fail(xhr => {
        const msg = xhr.responseJSON?.error || 'Error adding category';
        Swal.fire('Error', msg, 'error');
      });
  });

  // Rename (switch to edit mode)
  $('#categoriesList').on('click', '.btn-rename', function(){
    const li = $(this).closest('li');
    li.find('.cat-view, .cat-actions').addClass('d-none');
    li.find('.cat-edit').removeClass('d-none');
  });

  // Rename cancel
  $('#categoriesList').on('click', '.btn-cancel-rename', function(){
    const li = $(this).closest('li');
    li.find('.cat-edit').addClass('d-none');
    li.find('.cat-view, .cat-actions').removeClass('d-none');
  });

  // Save rename
  $('#categoriesList').on('click', '.btn-save-rename', function(){
    const li = $(this).closest('li');
    const id = li.data('id');
    const newName = (li.find('.input-newname').val() || '').trim();
    if (!newName) return Swal.fire('Oops', 'Please enter a new name.', 'info');

    $.ajax({
      url: '/admin/categories/' + id,
      method: 'PATCH',
      data: { name: newName }
    })
    .done(()=>{
      refreshCategoriesUI();
      Swal.fire({ icon:'success', title:'Renamed', timer:1000, showConfirmButton:false });
    })
    .fail(xhr=>{
      const msg = xhr.responseJSON?.error || 'Error renaming category';
      Swal.fire('Error', msg, 'error');
    });
  });

  // Delete category
  $('#categoriesList').on('click', '.btn-delete', function(){
    const li = $(this).closest('li');
    const id = li.data('id');
    const name = li.find('.cat-name').text();

    Swal.fire({
      title: `Delete "${name}"?`,
      text: 'This cannot be undone.',
      icon: 'warning',
      showCancelButton: true
    }).then(res=>{
      if (!res.isConfirmed) return;
      $.ajax({ url: '/admin/categories/' + id, method: 'DELETE' })
        .done(()=>{
          refreshCategoriesUI();
          Swal.fire({ icon:'success', title:'Deleted', timer:1000, showConfirmButton:false });
        })
        .fail(xhr=>{
          const msg = xhr.responseJSON?.error || 'Error deleting category';
          Swal.fire('Error', msg, 'error');
        });
    });
  });

  // Initial Load
  $(function(){
    loadInventory();
    loadCategories();
    updateAddPreview();
    toggleOneDateControls(false);
    markAppliedState(false);
  });
  $(window).on('pageshow', function(e){
    if(e.originalEvent && e.originalEvent.persisted) { loadInventory(); loadCategories(); }
  });
})();
</script>
</body>
</html>
